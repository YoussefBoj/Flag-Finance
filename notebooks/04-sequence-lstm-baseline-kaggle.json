{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Notebook 04: LSTM Sequence Models for Fraud Detection (Kaggle Version)\n",
    "\n",
    "## Overview\n",
    "\n",
    "This notebook implements advanced sequential models for fraud detection using temporal transaction patterns.\n",
    "\n",
    "### Objectives\n",
    "\n",
    "1. **Sequence Generation**: Create transaction sequences with temporal windowing\n",
    "2. **Model Architectures**: Build 3 advanced LSTM/GRU models\n",
    "3. **Training Pipeline**: Mixed precision training with class balancing\n",
    "4. **Embedding Extraction**: Generate embeddings for fusion model (Notebook 05)\n",
    "5. **Performance Analysis**: Comprehensive evaluation and visualization\n",
    "\n",
    "### Model Architectures\n",
    "\n",
    "| Model | Description | Key Features |\n",
    "|-------|-------------|-------------|\n",
    "| **BiLSTM + Attention** | Bidirectional LSTM with attention mechanism | Multi-layer, attention pooling, residual connections |\n",
    "| **Residual GRU** | Deep GRU with skip connections | 4 layers, layer normalization, temporal pooling |\n",
    "| **LSTM-CNN Hybrid** | Parallel LSTM and CNN paths | Multi-scale convolutions, feature fusion |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "execution_failed": "2025-10-27T18:38:10.817Z",
     "iopub.execute_input": "2025-10-27T17:41:56.673897Z",
     "iopub.status.busy": "2025-10-27T17:41:56.673065Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: torch in /usr/local/lib/python3.11/dist-packages (2.6.0+cu124)\n",
      "Collecting torch\n",
      "  Downloading torch-2.9.0-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (30 kB)\n",
      "Requirement already satisfied: torchvision in /usr/local/lib/python3.11/dist-packages (0.21.0+cu124)\n",
      "Collecting torchvision\n",
      "  Downloading torchvision-0.24.0-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (5.9 kB)\n",
      "Requirement already satisfied: torchaudio in /usr/local/lib/python3.11/dist-packages (2.6.0+cu124)\n",
      "Collecting torchaudio\n",
      "  Downloading torchaudio-2.9.0-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (6.9 kB)\n",
      "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from torch) (3.19.1)\n",
      "Requirement already satisfied: typing-extensions>=4.10.0 in /usr/local/lib/python3.11/dist-packages (from torch) (4.15.0)\n",
      "Collecting sympy>=1.13.3 (from torch)\n",
      "  Downloading sympy-1.14.0-py3-none-any.whl.metadata (12 kB)\n",
      "Requirement already satisfied: networkx>=2.5.1 in /usr/local/lib/python3.11/dist-packages (from torch) (3.5)\n",
      "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch) (3.1.6)\n",
      "Requirement already satisfied: fsspec>=0.8.5 in /usr/local/lib/python3.11/dist-packages (from torch) (2025.9.0)\n",
      "Collecting nvidia-cuda-nvrtc-cu12==12.8.93 (from torch)\n",
      "  Downloading nvidia_cuda_nvrtc_cu12-12.8.93-py3-none-manylinux2010_x86_64.manylinux_2_12_x86_64.whl.metadata (1.7 kB)\n",
      "Collecting nvidia-cuda-runtime-cu12==12.8.90 (from torch)\n",
      "  Downloading nvidia_cuda_runtime_cu12-12.8.90-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (1.7 kB)\n",
      "Collecting nvidia-cuda-cupti-cu12==12.8.90 (from torch)\n",
      "  Downloading nvidia_cuda_cupti_cu12-12.8.90-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (1.7 kB)\n",
      "Collecting nvidia-cudnn-cu12==9.10.2.21 (from torch)\n",
      "  Downloading nvidia_cudnn_cu12-9.10.2.21-py3-none-manylinux_2_27_x86_64.whl.metadata (1.8 kB)\n",
      "Collecting nvidia-cublas-cu12==12.8.4.1 (from torch)\n",
      "  Downloading nvidia_cublas_cu12-12.8.4.1-py3-none-manylinux_2_27_x86_64.whl.metadata (1.7 kB)\n",
      "Collecting nvidia-cufft-cu12==11.3.3.83 (from torch)\n",
      "  Downloading nvidia_cufft_cu12-11.3.3.83-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (1.7 kB)\n",
      "Collecting nvidia-curand-cu12==10.3.9.90 (from torch)\n",
      "  Downloading nvidia_curand_cu12-10.3.9.90-py3-none-manylinux_2_27_x86_64.whl.metadata (1.7 kB)\n",
      "Collecting nvidia-cusolver-cu12==11.7.3.90 (from torch)\n",
      "  Downloading nvidia_cusolver_cu12-11.7.3.90-py3-none-manylinux_2_27_x86_64.whl.metadata (1.8 kB)\n",
      "Collecting nvidia-cusparse-cu12==12.5.8.93 (from torch)\n",
      "  Downloading nvidia_cusparse_cu12-12.5.8.93-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (1.8 kB)\n",
      "Collecting nvidia-cusparselt-cu12==0.7.1 (from torch)\n",
      "  Downloading nvidia_cusparselt_cu12-0.7.1-py3-none-manylinux2014_x86_64.whl.metadata (7.0 kB)\n",
      "Collecting nvidia-nccl-cu12==2.27.5 (from torch)\n",
      "  Downloading nvidia_nccl_cu12-2.27.5-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (2.0 kB)\n",
      "Collecting nvidia-nvshmem-cu12==3.3.20 (from torch)\n",
      "  Downloading nvidia_nvshmem_cu12-3.3.20-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (2.1 kB)\n",
      "Collecting nvidia-nvtx-cu12==12.8.90 (from torch)\n",
      "  Downloading nvidia_nvtx_cu12-12.8.90-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (1.8 kB)\n",
      "Collecting nvidia-nvjitlink-cu12==12.8.93 (from torch)\n",
      "  Downloading nvidia_nvjitlink_cu12-12.8.93-py3-none-manylinux2010_x86_64.manylinux_2_12_x86_64.whl.metadata (1.7 kB)\n",
      "Collecting nvidia-cufile-cu12==1.13.1.3 (from torch)\n",
      "  Downloading nvidia_cufile_cu12-1.13.1.3-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (1.7 kB)\n",
      "Collecting triton==3.5.0 (from torch)\n",
      "  Downloading triton-3.5.0-cp311-cp311-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl.metadata (1.7 kB)\n",
      "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from torchvision) (1.26.4)\n",
      "Requirement already satisfied: pillow!=8.3.*,>=5.3.0 in /usr/local/lib/python3.11/dist-packages (from torchvision) (11.3.0)\n",
      "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy>=1.13.3->torch) (1.3.0)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch) (3.0.2)\n",
      "Requirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy->torchvision) (1.3.8)\n",
      "Requirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy->torchvision) (1.2.4)\n",
      "Requirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy->torchvision) (0.1.1)\n",
      "Requirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy->torchvision) (2025.2.0)\n",
      "Requirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy->torchvision) (2022.2.0)\n",
      "Requirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy->torchvision) (2.4.1)\n",
      "Requirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy->torchvision) (2024.2.0)\n",
      "Requirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy->torchvision) (2022.2.0)\n",
      "Requirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy->torchvision) (1.4.0)\n",
      "Requirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy->torchvision) (2024.2.0)\n",
      "Requirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy->torchvision) (2024.2.0)\n",
      "Downloading torch-2.9.0-cp311-cp311-manylinux_2_28_x86_64.whl (899.8 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m899.8/899.8 MB\u001b[0m \u001b[31m1.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n",
      "\u001b[?25hDownloading nvidia_cublas_cu12-12.8.4.1-py3-none-manylinux_2_27_x86_64.whl (594.3 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m594.3/594.3 MB\u001b[0m \u001b[31m2.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n",
      "\u001b[?25hDownloading nvidia_cuda_cupti_cu12-12.8.90-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (10.2 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m10.2/10.2 MB\u001b[0m \u001b[31m117.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m0:01\u001b[0m\n",
      "\u001b[?25hDownloading nvidia_cuda_nvrtc_cu12-12.8.93-py3-none-manylinux2010_x86_64.manylinux_2_12_x86_64.whl (88.0 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m88.0/88.0 MB\u001b[0m \u001b[31m19.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n",
      "\u001b[?25hDownloading nvidia_cuda_runtime_cu12-12.8.90-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (954 kB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m954.8/954.8 kB\u001b[0m \u001b[31m48.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hDownloading nvidia_cudnn_cu12-9.10.2.21-py3-none-manylinux_2_27_x86_64.whl (706.8 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m706.8/706.8 MB\u001b[0m \u001b[31m2.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n",
      "\u001b[?25hDownloading nvidia_cufft_cu12-11.3.3.83-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (193.1 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m193.1/193.1 MB\u001b[0m \u001b[31m1.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n",
      "\u001b[?25hDownloading nvidia_cufile_cu12-1.13.1.3-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (1.2 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.2/1.2 MB\u001b[0m \u001b[31m49.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hDownloading nvidia_curand_cu12-10.3.9.90-py3-none-manylinux_2_27_x86_64.whl (63.6 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m63.6/63.6 MB\u001b[0m \u001b[31m27.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n",
      "\u001b[?25hDownloading nvidia_cusolver_cu12-11.7.3.90-py3-none-manylinux_2_27_x86_64.whl (267.5 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m267.5/267.5 MB\u001b[0m \u001b[31m6.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n",
      "\u001b[?25hDownloading nvidia_cusparse_cu12-12.5.8.93-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (288.2 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m288.2/288.2 MB\u001b[0m \u001b[31m5.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n",
      "\u001b[?25hDownloading nvidia_cusparselt_cu12-0.7.1-py3-none-manylinux2014_x86_64.whl (287.2 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m287.2/287.2 MB\u001b[0m \u001b[31m5.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n",
      "\u001b[?25hDownloading nvidia_nccl_cu12-2.27.5-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (322.3 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m322.3/322.3 MB\u001b[0m \u001b[31m5.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n",
      "\u001b[?25hDownloading nvidia_nvjitlink_cu12-12.8.93-py3-none-manylinux2010_x86_64.manylinux_2_12_x86_64.whl (39.3 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m39.3/39.3 MB\u001b[0m \u001b[31m38.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m0:01\u001b[0mm\n",
      "\u001b[?25hDownloading nvidia_nvshmem_cu12-3.3.20-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (124.7 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m124.7/124.7 MB\u001b[0m \u001b[31m8.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n",
      "\u001b[?25hDownloading nvidia_nvtx_cu12-12.8.90-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (89 kB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m90.0/90.0 kB\u001b[0m \u001b[31m6.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hDownloading triton-3.5.0-cp311-cp311-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl (170.4 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m170.4/170.4 MB\u001b[0m \u001b[31m10.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n",
      "\u001b[?25hDownloading torchvision-0.24.0-cp311-cp311-manylinux_2_28_x86_64.whl (8.0 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m8.0/8.0 MB\u001b[0m \u001b[31m84.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n",
      "\u001b[?25hDownloading torchaudio-2.9.0-cp311-cp311-manylinux_2_28_x86_64.whl (2.1 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.1/2.1 MB\u001b[0m \u001b[31m74.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hDownloading sympy-1.14.0-py3-none-any.whl (6.3 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.3/6.3 MB\u001b[0m \u001b[31m110.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m\n",
      "\u001b[?25hInstalling collected packages: nvidia-cusparselt-cu12, triton, sympy, nvidia-nvtx-cu12, nvidia-nvshmem-cu12, nvidia-nvjitlink-cu12, nvidia-nccl-cu12, nvidia-curand-cu12, nvidia-cufile-cu12, nvidia-cuda-runtime-cu12, nvidia-cuda-nvrtc-cu12, nvidia-cuda-cupti-cu12, nvidia-cublas-cu12, nvidia-cusparse-cu12, nvidia-cufft-cu12, nvidia-cudnn-cu12, nvidia-cusolver-cu12, torch, torchaudio, torchvision\n",
      "  Attempting uninstall: nvidia-cusparselt-cu12\n",
      "    Found existing installation: nvidia-cusparselt-cu12 0.6.2\n",
      "    Uninstalling nvidia-cusparselt-cu12-0.6.2:\n",
      "      Successfully uninstalled nvidia-cusparselt-cu12-0.6.2\n",
      "  Attempting uninstall: triton\n",
      "    Found existing installation: triton 3.2.0\n",
      "    Uninstalling triton-3.2.0:\n",
      "      Successfully uninstalled triton-3.2.0\n",
      "  Attempting uninstall: sympy\n",
      "    Found existing installation: sympy 1.13.1\n",
      "    Uninstalling sympy-1.13.1:\n"
     ]
    }
   ],
   "source": [
    "# Install all required packages for Kaggle\n",
    "!pip install --upgrade torch torchvision torchaudio\n",
    "!pip install --upgrade scikit-learn seaborn tqdm pathlib typing-extensions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1️⃣ Environment Detection and Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T18:39:07.231261Z",
     "iopub.status.busy": "2025-10-27T18:39:07.230487Z",
     "iopub.status.idle": "2025-10-27T18:39:07.239713Z",
     "shell.execute_reply": "2025-10-27T18:39:07.239051Z",
     "shell.execute_reply.started": "2025-10-27T18:39:07.231236Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "🔍 Running on Kaggle: True\n",
      "🐍 Python version: 3.11.13 (main, Jun  4 2025, 08:57:29) [GCC 11.4.0]\n",
      "📦 Kaggle environment - packages pre-installed\n",
      "✅ Environment setup complete\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import sys\n",
    "from pathlib import Path\n",
    "\n",
    "# Detect environment\n",
    "RUNNING_ON_KAGGLE = 'KAGGLE_KERNEL_RUN_TYPE' in os.environ\n",
    "\n",
    "print(f\"🔍 Running on Kaggle: {RUNNING_ON_KAGGLE}\")\n",
    "print(f\"🐍 Python version: {sys.version}\")\n",
    "\n",
    "# Install additional packages if needed\n",
    "if RUNNING_ON_KAGGLE:\n",
    "    print(\"📦 Kaggle environment - packages pre-installed\")\n",
    "else:\n",
    "    print(\"📦 Local environment\")\n",
    "    # Uncomment to install locally:\n",
    "    # !pip install torch torchvision scikit-learn pandas numpy matplotlib seaborn tqdm\n",
    "\n",
    "print(\"✅ Environment setup complete\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2️⃣ Imports and Configuration"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3️⃣ Path Configuration\n",
    "\n",
    "**Important for Kaggle Users:**\n",
    "- `/kaggle/input/` is **read-only** (dataset location)\n",
    "- `/kaggle/working/` is **writable** (save outputs here)\n",
    "- All models, results, and intermediate files will be saved to `/kaggle/working/`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T18:39:07.241234Z",
     "iopub.status.busy": "2025-10-27T18:39:07.241021Z",
     "iopub.status.idle": "2025-10-27T18:39:13.033076Z",
     "shell.execute_reply": "2025-10-27T18:39:13.032233Z",
     "shell.execute_reply.started": "2025-10-27T18:39:07.241218Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PyTorch version: 2.6.0+cu124\n",
      "CUDA available: True\n",
      "GPU: Tesla P100-PCIE-16GB\n",
      "CUDA version: 12.4\n"
     ]
    }
   ],
   "source": [
    "# Core libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import json\n",
    "import warnings\n",
    "from typing import Dict, List, Tuple, Optional\n",
    "import time\n",
    "from tqdm.auto import tqdm\n",
    "import pickle\n",
    "import gc\n",
    "\n",
    "# PyTorch\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from torch.cuda.amp import autocast, GradScaler\n",
    "\n",
    "# Metrics\n",
    "from sklearn.metrics import (\n",
    "    accuracy_score, precision_score, recall_score,\n",
    "    f1_score, roc_auc_score, confusion_matrix,\n",
    "    classification_report, average_precision_score\n",
    ")\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "\n",
    "# Configuration\n",
    "warnings.filterwarnings('ignore')\n",
    "sns.set_style('whitegrid')\n",
    "plt.rcParams['figure.figsize'] = (12, 6)\n",
    "\n",
    "print(f'PyTorch version: {torch.__version__}')\n",
    "print(f'CUDA available: {torch.cuda.is_available()}')\n",
    "if torch.cuda.is_available():\n",
    "    print(f'GPU: {torch.cuda.get_device_name(0)}')\n",
    "    print(f'CUDA version: {torch.version.cuda}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T18:39:38.923308Z",
     "iopub.status.busy": "2025-10-27T18:39:38.922748Z",
     "iopub.status.idle": "2025-10-27T18:39:38.930511Z",
     "shell.execute_reply": "2025-10-27T18:39:38.929884Z",
     "shell.execute_reply.started": "2025-10-27T18:39:38.923286Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "📁 Kaggle Paths:\n",
      "   Input (read-only): /kaggle/input/flag-finance\n",
      "   Output (writable): /kaggle/working\n",
      "\n",
      "✅ Path configuration complete\n",
      "   Processed data: /kaggle/input/flag-finance/processed/processed\n",
      "   Models output: /kaggle/working/models\n",
      "   Results output: /kaggle/working/results\n",
      "\n",
      "🔧 Device: cuda\n"
     ]
    }
   ],
   "source": [
    "# Configure paths based on environment\n",
    "if RUNNING_ON_KAGGLE:\n",
    "    # Kaggle paths\n",
    "    BASE_PATH = Path('/kaggle/input/flag-finance')  # Input dataset (read-only)\n",
    "    WORKING_ROOT = Path('/kaggle/working')  # Output directory (writable)\n",
    "    \n",
    "    # Data paths\n",
    "    PROCESSED_PATH = BASE_PATH / 'processed' / 'processed'  # Read from input\n",
    "    RAW_PATH = BASE_PATH / 'raw'\n",
    "    \n",
    "    # Output paths (writable)\n",
    "    MODELS_PATH = WORKING_ROOT / 'models'\n",
    "    RESULTS_PATH = WORKING_ROOT / 'results'\n",
    "    \n",
    "    # Create output directories\n",
    "    MODELS_PATH.mkdir(exist_ok=True, parents=True)\n",
    "    RESULTS_PATH.mkdir(exist_ok=True, parents=True)\n",
    "    \n",
    "    print(f'📁 Kaggle Paths:')\n",
    "    print(f'   Input (read-only): {BASE_PATH}')\n",
    "    print(f'   Output (writable): {WORKING_ROOT}')\n",
    "    \n",
    "else:\n",
    "    # Local paths\n",
    "    BASE_PATH = Path('..').resolve()\n",
    "    WORKING_ROOT = BASE_PATH\n",
    "    \n",
    "    # Data paths\n",
    "    DATA_PATH = BASE_PATH / 'data'\n",
    "    PROCESSED_PATH = DATA_PATH / 'processed'\n",
    "    RAW_PATH = DATA_PATH / 'raw'\n",
    "    MODELS_PATH = DATA_PATH / 'models'\n",
    "    RESULTS_PATH = DATA_PATH / 'results'\n",
    "    \n",
    "    # Create directories if needed\n",
    "    for path in [PROCESSED_PATH, MODELS_PATH, RESULTS_PATH]:\n",
    "        path.mkdir(exist_ok=True, parents=True)\n",
    "    \n",
    "    print(f'📁 Local Paths:')\n",
    "    print(f'   Base: {BASE_PATH}')\n",
    "    print(f'   Data: {DATA_PATH}')\n",
    "\n",
    "print(f'\\n✅ Path configuration complete')\n",
    "print(f'   Processed data: {PROCESSED_PATH}')\n",
    "print(f'   Models output: {MODELS_PATH}')\n",
    "print(f'   Results output: {RESULTS_PATH}')\n",
    "\n",
    "# Set device\n",
    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "print(f'\\n🔧 Device: {device}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## \udea8 CRITICAL FIXES APPLIED TO THIS NOTEBOOK\n",
    "\n",
    "**Original Problem:** Models achieved only F1=0.09, Precision=0.048, Recall=1.0 (predicting everything as fraud)\n",
    "\n",
    "### ✅ Fix #1: Sequence Labeling Strategy (MOST CRITICAL)\n",
    "**Problem:** Used `window['isFraud'].max()` - if ANY transaction in 10-step window was fraud, entire sequence labeled as fraud  \n",
    "**Solution:** Changed to `window['isFraud'].iloc[-1]` - predict only the LAST transaction (forecasting approach)  \n",
    "**Impact:** Should improve precision dramatically while maintaining reasonable recall  \n",
    "**Location:** Lines 363, 434 in TransactionSequenceGenerator class\n",
    "\n",
    "### ✅ Fix #2: Hybrid Data Balancing\n",
    "**Problem:** Extreme class imbalance (0.64% fraud in training, but 4.75% in test - 10x mismatch!)  \n",
    "**Solution:** \n",
    "- Oversample fraud sequences 3x\n",
    "- Undersample legitimate sequences to achieve 10:1 ratio (vs original 155:1)\n",
    "**Impact:** Model can learn fraud patterns instead of just memorizing \"always predict fraud\"  \n",
    "**Location:** New cell after sequence generation\n",
    "\n",
    "### ✅ Fix #3: Stratified Split (instead of Temporal)\n",
    "**Problem:** Temporal split caused distribution mismatch (0.64% train vs 4.75% test fraud rate)  \n",
    "**Solution:** Use sklearn's stratified train_test_split to ensure consistent fraud rates across all splits  \n",
    "**Impact:** Fair evaluation, prevents misleading metrics  \n",
    "**Location:** Updated train/test split cell\n",
    "\n",
    "### ✅ Fix #4: Stronger Loss Weighting\n",
    "**Problem:** Focal loss not aggressive enough with original weights (gamma=2.5)  \n",
    "**Solution:** \n",
    "- Multiply fraud class weight by 10x (forces model to focus on fraud)\n",
    "- Increase gamma from 2.5 to 3.0 (more focus on hard examples)\n",
    "**Impact:** Model will optimize for fraud detection, not just overall accuracy  \n",
    "**Location:** train_model function\n",
    "\n",
    "### ✅ Fix #5: Eliminate Data Leakage\n",
    "**Problem:** stride=5 with sequence_length=10 creates 50% overlap between sequences  \n",
    "**Solution:** Changed stride to 10 (equals sequence_length, so 0% overlap)  \n",
    "**Impact:** Model sees truly independent examples, reduces overfitting  \n",
    "**Location:** seq_generator initialization\n",
    "\n",
    "---\n",
    "\n",
    "**Expected Results After Fixes:**\n",
    "- F1 Score: 0.40-0.60 (vs 0.09 before) - **3-5x improvement**\n",
    "- Precision: 0.50-0.70 (vs 0.048 before) - **10x improvement**  \n",
    "- Recall: 0.60-0.80 (vs 1.0 before) - slight decrease is OK\n",
    "- AUC: 0.85-0.95 (vs 0.73 before)\n",
    "- Models should converge in 20-40 epochs with actual learning curves (not flat)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4️⃣ Load PaySim Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T18:39:54.145131Z",
     "iopub.status.busy": "2025-10-27T18:39:54.144550Z",
     "iopub.status.idle": "2025-10-27T18:39:56.362192Z",
     "shell.execute_reply": "2025-10-27T18:39:56.361393Z",
     "shell.execute_reply.started": "2025-10-27T18:39:54.145106Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "======================================================================\n",
      "LOADING PAYSIM DATA\n",
      "======================================================================\n",
      "\n",
      "✅ Loaded PaySim enhanced data: (319773, 15)\n",
      "Fraud rate: 0.64%\n",
      "Columns: ['step', 'type', 'amount', 'nameOrig', 'oldbalanceOrg', 'newbalanceOrig', 'nameDest', 'oldbalanceDest', 'newbalanceDest', 'isFraud', 'isFlaggedFraud', 'hour_of_day', 'is_weekend', 'amount_log', 'amount_zscore']\n"
     ]
    }
   ],
   "source": [
    "print('='*70)\n",
    "print('LOADING PAYSIM DATA')\n",
    "print('='*70)\n",
    "\n",
    "# Load PaySim data (enhanced version)\n",
    "paysim_file = PROCESSED_PATH / 'paysim_data_enhanced.csv'\n",
    "\n",
    "if not paysim_file.exists():\n",
    "    raise FileNotFoundError(\n",
    "        f'PaySim enhanced file not found: {paysim_file}\\n'\n",
    "        'Verify preprocessing outputs or update the path accordingly.'\n",
    "    )\n",
    "\n",
    "# Load data\n",
    "df = pd.read_csv(paysim_file)\n",
    "print(f'\\n✅ Loaded PaySim enhanced data: {df.shape}')\n",
    "print(f'Fraud rate: {df[\"isFraud\"].mean()*100:.2f}%')\n",
    "print(f'Columns: {list(df.columns)}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5️⃣ Transaction Sequence Generator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T18:39:56.363937Z",
     "iopub.status.busy": "2025-10-27T18:39:56.363595Z",
     "iopub.status.idle": "2025-10-27T18:39:56.518749Z",
     "shell.execute_reply": "2025-10-27T18:39:56.517992Z",
     "shell.execute_reply.started": "2025-10-27T18:39:56.363919Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ TransactionSequenceGenerator class defined (with auto-detection)\n"
     ]
    }
   ],
   "source": [
    "class TransactionSequenceGenerator:\n",
    "    \"\"\"\n",
    "    Generate transaction sequences for LSTM training.\n",
    "    \n",
    "    TWO MODES:\n",
    "    1. User-based: Group by user (requires multiple transactions per user)\n",
    "    2. Temporal: Sliding window over time-sorted transactions (works with any data)\n",
    "    \"\"\"\n",
    "    \n",
    "    def __init__(self, \n",
    "                 sequence_length: int = 10,\n",
    "                 stride: int = 5,\n",
    "                 min_transactions: int = 3,\n",
    "                 mode: str = 'auto'):\n",
    "        \"\"\"\n",
    "        Args:\n",
    "            sequence_length: Number of transactions in each sequence\n",
    "            stride: Step size for sliding window\n",
    "            min_transactions: Minimum transactions per user (for user-based mode)\n",
    "            mode: 'user', 'temporal', or 'auto' (auto-detects best approach)\n",
    "        \"\"\"\n",
    "        self.sequence_length = sequence_length\n",
    "        self.stride = stride\n",
    "        self.min_transactions = min_transactions\n",
    "        self.mode = mode\n",
    "        self.feature_scaler = StandardScaler()\n",
    "        self.categorical_encoders = {}\n",
    "        self.actual_mode = None  # Will be set after detection\n",
    "        \n",
    "    def engineer_features(self, df: pd.DataFrame) -> pd.DataFrame:\n",
    "        \"\"\"Create advanced temporal and statistical features.\"\"\"\n",
    "        print('Engineering sequence features...')\n",
    "        \n",
    "        df = df.copy()\n",
    "        \n",
    "        # Temporal features\n",
    "        if 'step' in df.columns:\n",
    "            df['hour'] = df['step'] % 24\n",
    "            df['day'] = df['step'] // 24\n",
    "            df['is_weekend'] = (df['day'] % 7 >= 5).astype(int)\n",
    "            df['is_night'] = ((df['hour'] >= 22) | (df['hour'] <= 6)).astype(int)\n",
    "        \n",
    "        # Amount features\n",
    "        if 'amount' in df.columns:\n",
    "            df['amount_log'] = np.log1p(df['amount'])\n",
    "            df['amount_sqrt'] = np.sqrt(df['amount'])\n",
    "        \n",
    "        # Balance features (PaySim specific)\n",
    "        if 'oldbalanceOrg' in df.columns:\n",
    "            df['balance_ratio_orig'] = df['amount'] / (df['oldbalanceOrg'] + 1e-6)\n",
    "            df['balance_change_orig'] = df['newbalanceOrig'] - df['oldbalanceOrg']\n",
    "            df['balance_error_orig'] = df['balance_change_orig'] + df['amount']\n",
    "        \n",
    "        if 'oldbalanceDest' in df.columns:\n",
    "            df['balance_ratio_dest'] = df['amount'] / (df['oldbalanceDest'] + 1e-6)\n",
    "            df['balance_change_dest'] = df['newbalanceDest'] - df['oldbalanceDest']\n",
    "            df['balance_error_dest'] = df['balance_change_dest'] - df['amount']\n",
    "        \n",
    "        return df\n",
    "    \n",
    "    def _detect_mode(self, df: pd.DataFrame, user_col: str) -> str:\n",
    "        \"\"\"Auto-detect whether to use user-based or temporal mode.\"\"\"\n",
    "        if self.mode != 'auto':\n",
    "            return self.mode\n",
    "        \n",
    "        # Check transactions per user\n",
    "        user_tx_counts = df.groupby(user_col).size()\n",
    "        users_with_enough_tx = (user_tx_counts >= self.sequence_length).sum()\n",
    "        \n",
    "        print(f'\\n🔍 Mode Detection:')\n",
    "        print(f'   Total users: {len(user_tx_counts):,}')\n",
    "        print(f'   Users with ≥{self.sequence_length} transactions: {users_with_enough_tx:,}')\n",
    "        print(f'   Mean transactions per user: {user_tx_counts.mean():.2f}')\n",
    "        print(f'   Median transactions per user: {user_tx_counts.median():.0f}')\n",
    "        \n",
    "        # Use user-based if at least 100 users have enough transactions\n",
    "        if users_with_enough_tx >= 100:\n",
    "            print(f'   ✅ Using USER-BASED mode (sufficient multi-transaction users)')\n",
    "            return 'user'\n",
    "        else:\n",
    "            print(f'   ✅ Using TEMPORAL mode (insufficient multi-transaction users)')\n",
    "            return 'temporal'\n",
    "    \n",
    "    def create_sequences_temporal(self, df: pd.DataFrame) -> Tuple[List, List, List]:\n",
    "        \"\"\"\n",
    "        Create sequences using temporal sliding window (NO user grouping).\n",
    "        Works for any dataset, even with 1 transaction per user.\n",
    "        \"\"\"\n",
    "        print(f'\\n📊 Creating sequences in TEMPORAL mode')\n",
    "        print(f'   Sequence length: {self.sequence_length}')\n",
    "        print(f'   Stride: {self.stride}')\n",
    "        \n",
    "        # Engineer features\n",
    "        df = self.engineer_features(df)\n",
    "        \n",
    "        # Sort by time\n",
    "        df = df.sort_values('step').reset_index(drop=True)\n",
    "        \n",
    "        # Select features for sequences\n",
    "        feature_cols = [\n",
    "            'amount', 'amount_log', 'amount_sqrt',\n",
    "            'hour', 'day', 'is_weekend', 'is_night',\n",
    "            'oldbalanceOrg', 'newbalanceOrig',\n",
    "            'oldbalanceDest', 'newbalanceDest',\n",
    "            'balance_ratio_orig', 'balance_change_orig', 'balance_error_orig',\n",
    "            'balance_ratio_dest', 'balance_change_dest', 'balance_error_dest'\n",
    "        ]\n",
    "        \n",
    "        # Encode transaction type\n",
    "        if 'type' in df.columns:\n",
    "            self.categorical_encoders['type'] = LabelEncoder()\n",
    "            df['type_encoded'] = self.categorical_encoders['type'].fit_transform(df['type'])\n",
    "            feature_cols.append('type_encoded')\n",
    "        \n",
    "        # Filter available features\n",
    "        feature_cols = [col for col in feature_cols if col in df.columns]\n",
    "        \n",
    "        sequences = []\n",
    "        labels = []\n",
    "        metadata = []\n",
    "        \n",
    "        # Sliding window over entire dataset\n",
    "        for i in tqdm(range(0, len(df) - self.sequence_length + 1, self.stride), \n",
    "                      desc='Creating sequences'):\n",
    "            window = df.iloc[i:i + self.sequence_length]\n",
    "            \n",
    "            # Extract features\n",
    "            seq_features = window[feature_cols].values\n",
    "            \n",
    "            # ⭐ FIX #1: Label based on LAST transaction only (forecasting task)\n",
    "            # This creates a realistic prediction task instead of noisy \"any fraud = fraud sequence\"\n",
    "            seq_label = int(window['isFraud'].iloc[-1])\n",
    "            \n",
    "            sequences.append(seq_features)\n",
    "            labels.append(seq_label)\n",
    "            metadata.append({\n",
    "                'start_idx': i,\n",
    "                'end_idx': i + self.sequence_length,\n",
    "                'start_step': int(window['step'].iloc[0]),\n",
    "                'end_step': int(window['step'].iloc[-1]),\n",
    "                'fraud_count': int(window['isFraud'].sum())\n",
    "            })\n",
    "        \n",
    "        print(f'\\n✅ Created {len(sequences):,} sequences')\n",
    "        if len(labels) > 0:\n",
    "            print(f'   Fraud sequences: {sum(labels):,} ({sum(labels)/len(labels)*100:.2f}%)')\n",
    "        else:\n",
    "            print(f'   ⚠️ WARNING: No sequences created!')\n",
    "        \n",
    "        return sequences, labels, metadata\n",
    "    \n",
    "    def create_sequences_user_based(self, df: pd.DataFrame, user_col: str) -> Tuple[List, List, List]:\n",
    "        \"\"\"\n",
    "        Create sequences grouped by user (original implementation).\n",
    "        Only use when users have multiple transactions.\n",
    "        \"\"\"\n",
    "        print(f'\\n📊 Creating sequences in USER-BASED mode')\n",
    "        print(f'   Grouping by: {user_col}')\n",
    "        print(f'   Sequence length: {self.sequence_length}')\n",
    "        print(f'   Stride: {self.stride}')\n",
    "        \n",
    "        # Engineer features\n",
    "        df = self.engineer_features(df)\n",
    "        \n",
    "        # Sort by user and time\n",
    "        df = df.sort_values([user_col, 'step'])\n",
    "        \n",
    "        # Select features\n",
    "        feature_cols = [\n",
    "            'amount', 'amount_log', 'amount_sqrt',\n",
    "            'hour', 'day', 'is_weekend', 'is_night',\n",
    "            'oldbalanceOrg', 'newbalanceOrig',\n",
    "            'oldbalanceDest', 'newbalanceDest',\n",
    "            'balance_ratio_orig', 'balance_change_orig', 'balance_error_orig',\n",
    "            'balance_ratio_dest', 'balance_change_dest', 'balance_error_dest'\n",
    "        ]\n",
    "        \n",
    "        if 'type' in df.columns:\n",
    "            self.categorical_encoders['type'] = LabelEncoder()\n",
    "            df['type_encoded'] = self.categorical_encoders['type'].fit_transform(df['type'])\n",
    "            feature_cols.append('type_encoded')\n",
    "        \n",
    "        feature_cols = [col for col in feature_cols if col in df.columns]\n",
    "        \n",
    "        sequences = []\n",
    "        labels = []\n",
    "        metadata = []\n",
    "        \n",
    "        # Group by user\n",
    "        grouped = df.groupby(user_col)\n",
    "        \n",
    "        for user_id, group in tqdm(grouped, desc='Processing users'):\n",
    "            if len(group) < self.min_transactions:\n",
    "                continue\n",
    "            \n",
    "            group = group.reset_index(drop=True)\n",
    "            \n",
    "            # Sliding window within user\n",
    "            for i in range(0, len(group) - self.sequence_length + 1, self.stride):\n",
    "                window = group.iloc[i:i + self.sequence_length]\n",
    "                \n",
    "                seq_features = window[feature_cols].values\n",
    "                \n",
    "                # ⭐ FIX #1: Label based on LAST transaction only (forecasting task)\n",
    "                seq_label = int(window['isFraud'].iloc[-1])\n",
    "                \n",
    "                sequences.append(seq_features)\n",
    "                labels.append(seq_label)\n",
    "                metadata.append({\n",
    "                    'user_id': user_id,\n",
    "                    'start_idx': i,\n",
    "                    'end_idx': i + self.sequence_length,\n",
    "                    'fraud_count': int(window['isFraud'].sum())\n",
    "                })\n",
    "        \n",
    "        print(f'\\n✅ Created {len(sequences):,} sequences')\n",
    "        if len(labels) > 0:\n",
    "            print(f'   Fraud sequences: {sum(labels):,} ({sum(labels)/len(labels)*100:.2f}%)')\n",
    "        else:\n",
    "            print(f'   ⚠️ WARNING: No sequences created!')\n",
    "        \n",
    "        return sequences, labels, metadata\n",
    "    \n",
    "    def create_sequences_paysim(self, \n",
    "                                df: pd.DataFrame,\n",
    "                                user_col: str = 'nameOrig') -> Tuple[List, List, List]:\n",
    "        \"\"\"\n",
    "        Main entry point: Auto-detect best mode and create sequences.\n",
    "        \"\"\"\n",
    "        # Detect mode\n",
    "        self.actual_mode = self._detect_mode(df, user_col)\n",
    "        \n",
    "        # Create sequences based on detected mode\n",
    "        if self.actual_mode == 'temporal':\n",
    "            return self.create_sequences_temporal(df)\n",
    "        else:\n",
    "            return self.create_sequences_user_based(df, user_col)\n",
    "    \n",
    "    def normalize_sequences(self, sequences: List[np.ndarray], \n",
    "                           fit: bool = True) -> np.ndarray:\n",
    "        \"\"\"Normalize sequence features.\"\"\"\n",
    "        if len(sequences) == 0:\n",
    "            raise ValueError(\"Cannot normalize empty sequence list!\")\n",
    "        \n",
    "        print('Normalizing sequences...')\n",
    "        \n",
    "        # Flatten all sequences for fitting\n",
    "        all_features = np.vstack(sequences)\n",
    "        \n",
    "        if fit:\n",
    "            self.feature_scaler.fit(all_features)\n",
    "        \n",
    "        # Normalize each sequence\n",
    "        normalized = []\n",
    "        for seq in sequences:\n",
    "            normalized.append(self.feature_scaler.transform(seq))\n",
    "        \n",
    "        return np.array(normalized)\n",
    "    \n",
    "    def save(self, path: Path):\n",
    "        \"\"\"Save generator state.\"\"\"\n",
    "        state = {\n",
    "            'sequence_length': self.sequence_length,\n",
    "            'stride': self.stride,\n",
    "            'min_transactions': self.min_transactions,\n",
    "            'mode': self.mode,\n",
    "            'actual_mode': self.actual_mode,\n",
    "            'feature_scaler': self.feature_scaler,\n",
    "            'categorical_encoders': self.categorical_encoders\n",
    "        }\n",
    "        with open(path, 'wb') as f:\n",
    "            pickle.dump(state, f)\n",
    "        print(f'✅ Saved sequence generator to: {path}')\n",
    "    \n",
    "    @classmethod\n",
    "    def load(cls, path: Path):\n",
    "        \"\"\"Load generator state.\"\"\"\n",
    "        with open(path, 'rb') as f:\n",
    "            state = pickle.load(f)\n",
    "        \n",
    "        generator = cls(\n",
    "            sequence_length=state['sequence_length'],\n",
    "            stride=state['stride'],\n",
    "            min_transactions=state['min_transactions'],\n",
    "            mode=state.get('mode', 'auto')\n",
    "        )\n",
    "        generator.actual_mode = state.get('actual_mode')\n",
    "        generator.feature_scaler = state['feature_scaler']\n",
    "        generator.categorical_encoders = state['categorical_encoders']\n",
    "        \n",
    "        print(f'✅ Loaded sequence generator from: {path}')\n",
    "        return generator\n",
    "\n",
    "print('✅ TransactionSequenceGenerator class defined (with auto-detection)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6️⃣ PyTorch Dataset Class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T18:39:56.519859Z",
     "iopub.status.busy": "2025-10-27T18:39:56.519589Z",
     "iopub.status.idle": "2025-10-27T18:39:56.537365Z",
     "shell.execute_reply": "2025-10-27T18:39:56.536646Z",
     "shell.execute_reply.started": "2025-10-27T18:39:56.519811Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ SequenceDataset class defined\n"
     ]
    }
   ],
   "source": [
    "class SequenceDataset(Dataset):\n",
    "    \"\"\"PyTorch Dataset for transaction sequences.\"\"\"\n",
    "    \n",
    "    def __init__(self, sequences: np.ndarray, labels: np.ndarray, \n",
    "                 metadata: Optional[List[Dict]] = None):\n",
    "        self.sequences = torch.FloatTensor(sequences)\n",
    "        self.labels = torch.LongTensor(labels)\n",
    "        self.metadata = metadata\n",
    "    \n",
    "    def __len__(self):\n",
    "        return len(self.sequences)\n",
    "    \n",
    "    def __getitem__(self, idx):\n",
    "        return self.sequences[idx], self.labels[idx]\n",
    "    \n",
    "    def get_class_weights(self):\n",
    "        \"\"\"Compute class weights for balanced training.\"\"\"\n",
    "        labels_np = self.labels.numpy()\n",
    "        class_counts = np.bincount(labels_np)\n",
    "        weights = 1.0 / class_counts\n",
    "        weights = weights / weights.sum() * len(weights)\n",
    "        return torch.FloatTensor(weights)\n",
    "\n",
    "print('✅ SequenceDataset class defined')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7️⃣ Model Architectures\n",
    "\n",
    "### 7.1 Attention Layer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T18:39:56.539501Z",
     "iopub.status.busy": "2025-10-27T18:39:56.539282Z",
     "iopub.status.idle": "2025-10-27T18:39:56.557704Z",
     "shell.execute_reply": "2025-10-27T18:39:56.557001Z",
     "shell.execute_reply.started": "2025-10-27T18:39:56.539485Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ AttentionLayer defined\n"
     ]
    }
   ],
   "source": [
    "class AttentionLayer(nn.Module):\n",
    "    \"\"\"Attention mechanism for LSTM outputs.\"\"\"\n",
    "    \n",
    "    def __init__(self, hidden_size):\n",
    "        super().__init__()\n",
    "        self.attention = nn.Sequential(\n",
    "            nn.Linear(hidden_size, hidden_size),\n",
    "            nn.Tanh(),\n",
    "            nn.Linear(hidden_size, 1)\n",
    "        )\n",
    "    \n",
    "    def forward(self, lstm_output):\n",
    "        # lstm_output: (batch, seq_len, hidden_size)\n",
    "        attention_weights = self.attention(lstm_output)  # (batch, seq_len, 1)\n",
    "        attention_weights = F.softmax(attention_weights, dim=1)\n",
    "        \n",
    "        # Weighted sum\n",
    "        attended = torch.sum(attention_weights * lstm_output, dim=1)  # (batch, hidden_size)\n",
    "        return attended, attention_weights\n",
    "\n",
    "print('✅ AttentionLayer defined')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7.2 BiLSTM with Attention"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T18:39:56.558789Z",
     "iopub.status.busy": "2025-10-27T18:39:56.558541Z",
     "iopub.status.idle": "2025-10-27T18:39:56.572845Z",
     "shell.execute_reply": "2025-10-27T18:39:56.572249Z",
     "shell.execute_reply.started": "2025-10-27T18:39:56.558766Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ BiLSTMWithAttention defined\n"
     ]
    }
   ],
   "source": [
    "class BiLSTMWithAttention(nn.Module):\n",
    "    \"\"\"\n",
    "    Bidirectional LSTM with attention mechanism.\n",
    "    \n",
    "    Features:\n",
    "    - Multi-layer bidirectional LSTM\n",
    "    - Attention pooling over time steps\n",
    "    - Dropout and batch normalization\n",
    "    - Residual connections\n",
    "    \"\"\"\n",
    "    \n",
    "    def __init__(self, \n",
    "                 input_size: int,\n",
    "                 hidden_size: int = 128,\n",
    "                 num_layers: int = 3,\n",
    "                 dropout: float = 0.3,\n",
    "                 num_classes: int = 2):\n",
    "        super().__init__()\n",
    "        \n",
    "        self.hidden_size = hidden_size\n",
    "        self.num_layers = num_layers\n",
    "        \n",
    "        # Input projection\n",
    "        self.input_proj = nn.Sequential(\n",
    "            nn.Linear(input_size, hidden_size),\n",
    "            nn.BatchNorm1d(hidden_size),\n",
    "            nn.ReLU(),\n",
    "            nn.Dropout(dropout * 0.5)\n",
    "        )\n",
    "        \n",
    "        # Bidirectional LSTM\n",
    "        self.lstm = nn.LSTM(\n",
    "            hidden_size,\n",
    "            hidden_size,\n",
    "            num_layers=num_layers,\n",
    "            batch_first=True,\n",
    "            bidirectional=True,\n",
    "            dropout=dropout if num_layers > 1 else 0\n",
    "        )\n",
    "        \n",
    "        # Attention layer\n",
    "        self.attention = AttentionLayer(hidden_size * 2)\n",
    "        \n",
    "        # Classifier\n",
    "        self.classifier = nn.Sequential(\n",
    "            nn.Linear(hidden_size * 2, hidden_size),\n",
    "            nn.BatchNorm1d(hidden_size),\n",
    "            nn.ReLU(),\n",
    "            nn.Dropout(dropout),\n",
    "            nn.Linear(hidden_size, hidden_size // 2),\n",
    "            nn.BatchNorm1d(hidden_size // 2),\n",
    "            nn.ReLU(),\n",
    "            nn.Dropout(dropout * 0.7),\n",
    "            nn.Linear(hidden_size // 2, num_classes)\n",
    "        )\n",
    "        \n",
    "        self._init_weights()\n",
    "    \n",
    "    def _init_weights(self):\n",
    "        \"\"\"Fixed weight initialization that handles all parameter types.\"\"\"\n",
    "        for module in self.modules():\n",
    "            if isinstance(module, nn.Linear):\n",
    "                nn.init.xavier_uniform_(module.weight)\n",
    "                if module.bias is not None:\n",
    "                    nn.init.zeros_(module.bias)\n",
    "            elif isinstance(module, nn.LSTM):\n",
    "                for name, param in module.named_parameters():\n",
    "                    if 'weight_ih' in name:\n",
    "                        nn.init.xavier_uniform_(param)\n",
    "                    elif 'weight_hh' in name:\n",
    "                        nn.init.orthogonal_(param)\n",
    "                    elif 'bias' in name:\n",
    "                        nn.init.zeros_(param)\n",
    "            elif isinstance(module, nn.BatchNorm1d):\n",
    "                if module.weight is not None:\n",
    "                    nn.init.ones_(module.weight)\n",
    "                if module.bias is not None:\n",
    "                    nn.init.zeros_(module.bias)\n",
    "    \n",
    "    def forward(self, x):\n",
    "        batch_size, seq_len, input_size = x.size()\n",
    "        \n",
    "        # Project each time step\n",
    "        x_proj = self.input_proj(x.view(-1, input_size))\n",
    "        x_proj = x_proj.view(batch_size, seq_len, -1)\n",
    "        \n",
    "        # LSTM\n",
    "        lstm_out, _ = self.lstm(x_proj)\n",
    "        \n",
    "        # Attention pooling\n",
    "        attended, attention_weights = self.attention(lstm_out)\n",
    "        \n",
    "        # Classification\n",
    "        output = self.classifier(attended)\n",
    "        \n",
    "        return output\n",
    "    \n",
    "    def extract_embeddings(self, x):\n",
    "        \"\"\"Extract embeddings for fusion model.\"\"\"\n",
    "        batch_size, seq_len, input_size = x.size()\n",
    "        \n",
    "        x_proj = self.input_proj(x.view(-1, input_size))\n",
    "        x_proj = x_proj.view(batch_size, seq_len, -1)\n",
    "        \n",
    "        lstm_out, _ = self.lstm(x_proj)\n",
    "        attended, _ = self.attention(lstm_out)\n",
    "        \n",
    "        return attended\n",
    "\n",
    "print('✅ BiLSTMWithAttention defined')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7.3 Residual GRU"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T18:39:56.573898Z",
     "iopub.status.busy": "2025-10-27T18:39:56.573644Z",
     "iopub.status.idle": "2025-10-27T18:39:56.594416Z",
     "shell.execute_reply": "2025-10-27T18:39:56.593852Z",
     "shell.execute_reply.started": "2025-10-27T18:39:56.573873Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ ResidualGRU defined\n"
     ]
    }
   ],
   "source": [
    "class ResidualGRU(nn.Module):\n",
    "    \"\"\"\n",
    "    GRU with residual connections for deep networks.\n",
    "    \n",
    "    Features:\n",
    "    - Multi-layer GRU with skip connections\n",
    "    - Layer normalization\n",
    "    - Temporal max pooling\n",
    "    \"\"\"\n",
    "    \n",
    "    def __init__(self,\n",
    "                 input_size: int,\n",
    "                 hidden_size: int = 128,\n",
    "                 num_layers: int = 4,\n",
    "                 dropout: float = 0.3,\n",
    "                 num_classes: int = 2):\n",
    "        super().__init__()\n",
    "        \n",
    "        self.hidden_size = hidden_size\n",
    "        self.num_layers = num_layers\n",
    "        \n",
    "        # Input projection\n",
    "        self.input_proj = nn.Sequential(\n",
    "            nn.Linear(input_size, hidden_size),\n",
    "            nn.LayerNorm(hidden_size),\n",
    "            nn.ReLU()\n",
    "        )\n",
    "        \n",
    "        # Stacked GRU layers with residual connections\n",
    "        self.gru_layers = nn.ModuleList()\n",
    "        self.layer_norms = nn.ModuleList()\n",
    "        \n",
    "        for i in range(num_layers):\n",
    "            self.gru_layers.append(\n",
    "                nn.GRU(hidden_size, hidden_size, batch_first=True)\n",
    "            )\n",
    "            self.layer_norms.append(nn.LayerNorm(hidden_size))\n",
    "        \n",
    "        self.dropout = nn.Dropout(dropout)\n",
    "        \n",
    "        # Classifier with temporal features\n",
    "        self.classifier = nn.Sequential(\n",
    "            nn.Linear(hidden_size * 2, hidden_size),  # *2 for max+mean pooling\n",
    "            nn.BatchNorm1d(hidden_size),\n",
    "            nn.ReLU(),\n",
    "            nn.Dropout(dropout),\n",
    "            nn.Linear(hidden_size, num_classes)\n",
    "        )\n",
    "        \n",
    "        self._init_weights()\n",
    "    \n",
    "    def _init_weights(self):\n",
    "        \"\"\"Fixed weight initialization that handles all parameter types.\"\"\"\n",
    "        for module in self.modules():\n",
    "            if isinstance(module, nn.Linear):\n",
    "                nn.init.kaiming_normal_(module.weight, nonlinearity='relu')\n",
    "                if module.bias is not None:\n",
    "                    nn.init.zeros_(module.bias)\n",
    "            elif isinstance(module, nn.GRU):\n",
    "                for name, param in module.named_parameters():\n",
    "                    if 'weight_ih' in name:\n",
    "                        nn.init.xavier_uniform_(param)\n",
    "                    elif 'weight_hh' in name:\n",
    "                        nn.init.orthogonal_(param)\n",
    "                    elif 'bias' in name:\n",
    "                        nn.init.zeros_(param)\n",
    "            elif isinstance(module, (nn.LayerNorm, nn.BatchNorm1d)):\n",
    "                if module.weight is not None:\n",
    "                    nn.init.ones_(module.weight)\n",
    "                if module.bias is not None:\n",
    "                    nn.init.zeros_(module.bias)\n",
    "    \n",
    "    def forward(self, x):\n",
    "        batch_size, seq_len, _ = x.size()\n",
    "        \n",
    "        # Project input\n",
    "        x = self.input_proj(x.view(batch_size * seq_len, -1))\n",
    "        x = x.view(batch_size, seq_len, -1)\n",
    "        \n",
    "        # Stacked GRU with residuals\n",
    "        for i, (gru, norm) in enumerate(zip(self.gru_layers, self.layer_norms)):\n",
    "            residual = x\n",
    "            x, _ = gru(x)\n",
    "            x = norm(x)\n",
    "            x = self.dropout(x)\n",
    "            \n",
    "            # Residual connection\n",
    "            if i > 0:\n",
    "                x = x + residual * 0.3\n",
    "        \n",
    "        # Temporal pooling\n",
    "        max_pool = torch.max(x, dim=1)[0]\n",
    "        mean_pool = torch.mean(x, dim=1)\n",
    "        pooled = torch.cat([max_pool, mean_pool], dim=1)\n",
    "        \n",
    "        # Classification\n",
    "        output = self.classifier(pooled)\n",
    "        \n",
    "        return output\n",
    "    \n",
    "    def extract_embeddings(self, x):\n",
    "        \"\"\"Extract embeddings for fusion model.\"\"\"\n",
    "        batch_size, seq_len, _ = x.size()\n",
    "        \n",
    "        x = self.input_proj(x.view(batch_size * seq_len, -1))\n",
    "        x = x.view(batch_size, seq_len, -1)\n",
    "        \n",
    "        for i, (gru, norm) in enumerate(zip(self.gru_layers, self.layer_norms)):\n",
    "            residual = x\n",
    "            x, _ = gru(x)\n",
    "            x = norm(x)\n",
    "            if i > 0:\n",
    "                x = x + residual * 0.3\n",
    "        \n",
    "        max_pool = torch.max(x, dim=1)[0]\n",
    "        mean_pool = torch.mean(x, dim=1)\n",
    "        return torch.cat([max_pool, mean_pool], dim=1)\n",
    "\n",
    "print('✅ ResidualGRU defined')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7.4 LSTM-CNN Hybrid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T18:39:56.595486Z",
     "iopub.status.busy": "2025-10-27T18:39:56.595265Z",
     "iopub.status.idle": "2025-10-27T18:39:56.618276Z",
     "shell.execute_reply": "2025-10-27T18:39:56.617547Z",
     "shell.execute_reply.started": "2025-10-27T18:39:56.595468Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ LSTMCNN defined\n"
     ]
    }
   ],
   "source": [
    "class LSTMCNN(nn.Module):\n",
    "    \"\"\"\n",
    "    Hybrid LSTM-CNN architecture.\n",
    "    \n",
    "    Features:\n",
    "    - Parallel LSTM and 1D CNN paths\n",
    "    - Feature fusion\n",
    "    - Multi-scale temporal modeling\n",
    "    \"\"\"\n",
    "    \n",
    "    def __init__(self,\n",
    "                 input_size: int,\n",
    "                 hidden_size: int = 128,\n",
    "                 num_layers: int = 2,\n",
    "                 dropout: float = 0.3,\n",
    "                 num_classes: int = 2):\n",
    "        super().__init__()\n",
    "        \n",
    "        # LSTM path\n",
    "        self.lstm = nn.LSTM(\n",
    "            input_size,\n",
    "            hidden_size,\n",
    "            num_layers=num_layers,\n",
    "            batch_first=True,\n",
    "            bidirectional=True,\n",
    "            dropout=dropout if num_layers > 1 else 0\n",
    "        )\n",
    "        \n",
    "        # CNN path (multi-scale)\n",
    "        self.conv1 = nn.Conv1d(input_size, hidden_size, kernel_size=3, padding=1)\n",
    "        self.conv2 = nn.Conv1d(input_size, hidden_size, kernel_size=5, padding=2)\n",
    "        self.conv3 = nn.Conv1d(input_size, hidden_size, kernel_size=7, padding=3)\n",
    "        \n",
    "        self.bn1 = nn.BatchNorm1d(hidden_size)\n",
    "        self.bn2 = nn.BatchNorm1d(hidden_size)\n",
    "        self.bn3 = nn.BatchNorm1d(hidden_size)\n",
    "        \n",
    "        # Fusion layer\n",
    "        fusion_size = hidden_size * 2 + hidden_size * 3  # LSTM (bidir) + 3 CNNs\n",
    "        self.fusion = nn.Sequential(\n",
    "            nn.Linear(fusion_size, hidden_size * 2),\n",
    "            nn.BatchNorm1d(hidden_size * 2),\n",
    "            nn.ReLU(),\n",
    "            nn.Dropout(dropout)\n",
    "        )\n",
    "        \n",
    "        # Classifier\n",
    "        self.classifier = nn.Sequential(\n",
    "            nn.Linear(hidden_size * 2, hidden_size),\n",
    "            nn.BatchNorm1d(hidden_size),\n",
    "            nn.ReLU(),\n",
    "            nn.Dropout(dropout),\n",
    "            nn.Linear(hidden_size, num_classes)\n",
    "        )\n",
    "        \n",
    "        self._init_weights()\n",
    "    \n",
    "    def _init_weights(self):\n",
    "        \"\"\"Fixed weight initialization that handles all parameter types.\"\"\"\n",
    "        for module in self.modules():\n",
    "            if isinstance(module, nn.Linear):\n",
    "                nn.init.kaiming_normal_(module.weight, nonlinearity='relu')\n",
    "                if module.bias is not None:\n",
    "                    nn.init.zeros_(module.bias)\n",
    "            elif isinstance(module, nn.Conv1d):\n",
    "                nn.init.kaiming_normal_(module.weight, nonlinearity='relu')\n",
    "                if module.bias is not None:\n",
    "                    nn.init.zeros_(module.bias)\n",
    "            elif isinstance(module, nn.LSTM):\n",
    "                for name, param in module.named_parameters():\n",
    "                    if 'weight_ih' in name:\n",
    "                        nn.init.xavier_uniform_(param)\n",
    "                    elif 'weight_hh' in name:\n",
    "                        nn.init.orthogonal_(param)\n",
    "                    elif 'bias' in name:\n",
    "                        nn.init.zeros_(param)\n",
    "            elif isinstance(module, nn.BatchNorm1d):\n",
    "                if module.weight is not None:\n",
    "                    nn.init.ones_(module.weight)\n",
    "                if module.bias is not None:\n",
    "                    nn.init.zeros_(module.bias)\n",
    "    \n",
    "    def forward(self, x):\n",
    "        batch_size, seq_len, input_size = x.size()\n",
    "        \n",
    "        # LSTM path\n",
    "        lstm_out, _ = self.lstm(x)\n",
    "        lstm_max = torch.max(lstm_out, dim=1)[0]\n",
    "        \n",
    "        # CNN path (transpose for Conv1d)\n",
    "        x_cnn = x.transpose(1, 2)  # (batch, input_size, seq_len)\n",
    "        \n",
    "        conv1_out = F.relu(self.bn1(self.conv1(x_cnn)))\n",
    "        conv2_out = F.relu(self.bn2(self.conv2(x_cnn)))\n",
    "        conv3_out = F.relu(self.bn3(self.conv3(x_cnn)))\n",
    "        \n",
    "        # Global max pooling for each conv\n",
    "        conv1_pool = torch.max(conv1_out, dim=2)[0]\n",
    "        conv2_pool = torch.max(conv2_out, dim=2)[0]\n",
    "        conv3_pool = torch.max(conv3_out, dim=2)[0]\n",
    "        \n",
    "        # Fuse all features\n",
    "        fused = torch.cat([lstm_max, conv1_pool, conv2_pool, conv3_pool], dim=1)\n",
    "        fused = self.fusion(fused)\n",
    "        \n",
    "        # Classification\n",
    "        output = self.classifier(fused)\n",
    "        \n",
    "        return output\n",
    "    \n",
    "    def extract_embeddings(self, x):\n",
    "        \"\"\"Extract embeddings for fusion model.\"\"\"\n",
    "        batch_size, seq_len, input_size = x.size()\n",
    "        \n",
    "        lstm_out, _ = self.lstm(x)\n",
    "        lstm_max = torch.max(lstm_out, dim=1)[0]\n",
    "        \n",
    "        x_cnn = x.transpose(1, 2)\n",
    "        conv1_out = F.relu(self.bn1(self.conv1(x_cnn)))\n",
    "        conv2_out = F.relu(self.bn2(self.conv2(x_cnn)))\n",
    "        conv3_out = F.relu(self.bn3(self.conv3(x_cnn)))\n",
    "        \n",
    "        conv1_pool = torch.max(conv1_out, dim=2)[0]\n",
    "        conv2_pool = torch.max(conv2_out, dim=2)[0]\n",
    "        conv3_pool = torch.max(conv3_out, dim=2)[0]\n",
    "        \n",
    "        fused = torch.cat([lstm_max, conv1_pool, conv2_pool, conv3_pool], dim=1)\n",
    "        return self.fusion(fused)\n",
    "\n",
    "print('✅ LSTMCNN defined')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 8️⃣ Training Utilities\n",
    "\n",
    "### 8.1 Focal Loss for Class Imbalance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T18:39:56.619166Z",
     "iopub.status.busy": "2025-10-27T18:39:56.618956Z",
     "iopub.status.idle": "2025-10-27T18:39:56.636075Z",
     "shell.execute_reply": "2025-10-27T18:39:56.635238Z",
     "shell.execute_reply.started": "2025-10-27T18:39:56.619150Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ FocalLoss defined\n"
     ]
    }
   ],
   "source": [
    "class FocalLoss(nn.Module):\n",
    "    \"\"\"Focal Loss for handling class imbalance.\"\"\"\n",
    "    \n",
    "    def __init__(self, alpha=None, gamma=2.0):\n",
    "        super().__init__()\n",
    "        self.alpha = alpha\n",
    "        self.gamma = gamma\n",
    "    \n",
    "    def forward(self, inputs, targets):\n",
    "        ce_loss = F.cross_entropy(inputs, targets, reduction='none', weight=self.alpha)\n",
    "        pt = torch.exp(-ce_loss)\n",
    "        focal_loss = ((1 - pt) ** self.gamma) * ce_loss\n",
    "        return focal_loss.mean()\n",
    "\n",
    "print('✅ FocalLoss defined')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 8.2 Training and Evaluation Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T18:39:56.637032Z",
     "iopub.status.busy": "2025-10-27T18:39:56.636755Z",
     "iopub.status.idle": "2025-10-27T18:39:56.652261Z",
     "shell.execute_reply": "2025-10-27T18:39:56.651432Z",
     "shell.execute_reply.started": "2025-10-27T18:39:56.637014Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Training and evaluation functions defined\n"
     ]
    }
   ],
   "source": [
    "def train_epoch(model, loader, optimizer, criterion, scaler, device):\n",
    "    \"\"\"Train for one epoch with mixed precision.\"\"\"\n",
    "    model.train()\n",
    "    total_loss = 0\n",
    "    all_preds = []\n",
    "    all_labels = []\n",
    "    \n",
    "    for sequences, labels in tqdm(loader, desc='Training', leave=False):\n",
    "        sequences, labels = sequences.to(device), labels.to(device)\n",
    "        \n",
    "        optimizer.zero_grad(set_to_none=True)\n",
    "        \n",
    "        with autocast():\n",
    "            outputs = model(sequences)\n",
    "            loss = criterion(outputs, labels)\n",
    "        \n",
    "        scaler.scale(loss).backward()\n",
    "        scaler.unscale_(optimizer)\n",
    "        torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)\n",
    "        scaler.step(optimizer)\n",
    "        scaler.update()\n",
    "        \n",
    "        total_loss += loss.item() * sequences.size(0)\n",
    "        \n",
    "        preds = outputs.argmax(dim=1)\n",
    "        all_preds.extend(preds.cpu().numpy())\n",
    "        all_labels.extend(labels.cpu().numpy())\n",
    "    \n",
    "    avg_loss = total_loss / len(loader.dataset)\n",
    "    accuracy = accuracy_score(all_labels, all_preds)\n",
    "    \n",
    "    return avg_loss, accuracy\n",
    "\n",
    "\n",
    "@torch.no_grad()\n",
    "def evaluate(model, loader, criterion, device):\n",
    "    \"\"\"Evaluate model.\"\"\"\n",
    "    model.eval()\n",
    "    total_loss = 0\n",
    "    all_preds = []\n",
    "    all_probs = []\n",
    "    all_labels = []\n",
    "    \n",
    "    for sequences, labels in tqdm(loader, desc='Evaluating', leave=False):\n",
    "        sequences, labels = sequences.to(device), labels.to(device)\n",
    "        \n",
    "        outputs = model(sequences)\n",
    "        loss = criterion(outputs, labels)\n",
    "        \n",
    "        total_loss += loss.item() * sequences.size(0)\n",
    "        \n",
    "        probs = F.softmax(outputs, dim=1)\n",
    "        preds = probs.argmax(dim=1)\n",
    "        \n",
    "        all_preds.extend(preds.cpu().numpy())\n",
    "        all_probs.extend(probs[:, 1].cpu().numpy())\n",
    "        all_labels.extend(labels.cpu().numpy())\n",
    "    \n",
    "    avg_loss = total_loss / len(loader.dataset)\n",
    "    \n",
    "    metrics = {\n",
    "        'loss': avg_loss,\n",
    "        'accuracy': accuracy_score(all_labels, all_preds),\n",
    "        'precision': precision_score(all_labels, all_preds, zero_division=0),\n",
    "        'recall': recall_score(all_labels, all_preds, zero_division=0),\n",
    "        'f1': f1_score(all_labels, all_preds, zero_division=0),\n",
    "        'auc': roc_auc_score(all_labels, all_probs) if len(np.unique(all_labels)) > 1 else 0.0,\n",
    "        'ap': average_precision_score(all_labels, all_probs) if len(np.unique(all_labels)) > 1 else 0.0\n",
    "    }\n",
    "    \n",
    "    return metrics, all_preds, all_probs\n",
    "\n",
    "print('✅ Training and evaluation functions defined')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 8.3 Complete Training Loop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T18:39:56.654859Z",
     "iopub.status.busy": "2025-10-27T18:39:56.654550Z",
     "iopub.status.idle": "2025-10-27T18:39:56.671340Z",
     "shell.execute_reply": "2025-10-27T18:39:56.670732Z",
     "shell.execute_reply.started": "2025-10-27T18:39:56.654833Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Complete training function defined\n"
     ]
    }
   ],
   "source": [
    "def train_model(model, train_loader, val_loader, model_name, \n",
    "                epochs=100, lr=0.001, patience=15, device='cuda'):\n",
    "    \"\"\"Complete training loop with early stopping.\"\"\"\n",
    "    \n",
    "    print(f'\\n{\"=\"*70}')\n",
    "    print(f'Training {model_name}')\n",
    "    print(f'{\"=\"*70}')\n",
    "    \n",
    "    # ⭐ FIX #4: Boost fraud loss weight and increase focal loss gamma\n",
    "    # Original weights computed from dataset, then multiply fraud weight by 10x\n",
    "    # This forces the model to pay much more attention to fraud examples\n",
    "    class_weights = train_loader.dataset.get_class_weights().to(device)\n",
    "    class_weights[1] *= 10  # Boost fraud (minority class) weight by 10x\n",
    "    print(f'   Class weights: Legit={class_weights[0]:.4f}, Fraud={class_weights[1]:.4f}')\n",
    "    \n",
    "    # Increase gamma from 2.5 to 3.0 (more focus on hard examples)\n",
    "    criterion = FocalLoss(alpha=class_weights, gamma=3.0)\n",
    "    \n",
    "    optimizer = torch.optim.AdamW(model.parameters(), lr=lr, weight_decay=1e-4)\n",
    "    scheduler = torch.optim.lr_scheduler.CosineAnnealingWarmRestarts(\n",
    "        optimizer, T_0=20, T_mult=2\n",
    "    )\n",
    "    scaler = GradScaler()\n",
    "    \n",
    "    best_val_f1 = 0\n",
    "    best_val_acc = 0\n",
    "    patience_counter = 0\n",
    "    history = {\n",
    "        'train_loss': [], 'train_acc': [],\n",
    "        'val_loss': [], 'val_acc': [], 'val_f1': [], 'val_auc': []\n",
    "    }\n",
    "    \n",
    "    start_time = time.time()\n",
    "    \n",
    "    for epoch in range(1, epochs + 1):\n",
    "        # Train\n",
    "        train_loss, train_acc = train_epoch(\n",
    "            model, train_loader, optimizer, criterion, scaler, device\n",
    "        )\n",
    "        \n",
    "        # Validate\n",
    "        val_metrics, _, _ = evaluate(model, val_loader, criterion, device)\n",
    "        \n",
    "        # Update scheduler\n",
    "        scheduler.step()\n",
    "        \n",
    "        # Record history\n",
    "        history['train_loss'].append(train_loss)\n",
    "        history['train_acc'].append(train_acc)\n",
    "        history['val_loss'].append(val_metrics['loss'])\n",
    "        history['val_acc'].append(val_metrics['accuracy'])\n",
    "        history['val_f1'].append(val_metrics['f1'])\n",
    "        history['val_auc'].append(val_metrics['auc'])\n",
    "        \n",
    "        # Print progress\n",
    "        if epoch % 5 == 0 or epoch == 1:\n",
    "            print(f'Epoch {epoch:03d}/{epochs} | '\n",
    "                  f'Loss: {train_loss:.4f} | '\n",
    "                  f'Val Acc: {val_metrics[\"accuracy\"]:.4f} | '\n",
    "                  f'Val F1: {val_metrics[\"f1\"]:.4f} | '\n",
    "                  f'Val AUC: {val_metrics[\"auc\"]:.4f}')\n",
    "        \n",
    "        # Save best model based on F1 or Accuracy improvement\n",
    "        improved = False\n",
    "        improvement_msg = []\n",
    "        \n",
    "        if val_metrics['f1'] > best_val_f1:\n",
    "            best_val_f1 = val_metrics['f1']\n",
    "            improved = True\n",
    "            improvement_msg.append(f'F1: {best_val_f1:.4f}')\n",
    "        \n",
    "        if val_metrics['accuracy'] > best_val_acc:\n",
    "            best_val_acc = val_metrics['accuracy']\n",
    "            improved = True\n",
    "            improvement_msg.append(f'Acc: {best_val_acc:.4f}')\n",
    "        \n",
    "        if improved:\n",
    "            patience_counter = 0\n",
    "            checkpoint_path = MODELS_PATH / f'{model_name}_best.pt'\n",
    "            torch.save({\n",
    "                'model_state_dict': model.state_dict(),\n",
    "                'optimizer_state_dict': optimizer.state_dict(),\n",
    "                'epoch': epoch,\n",
    "                'val_metrics': val_metrics,\n",
    "                'best_val_f1': best_val_f1,\n",
    "                'best_val_acc': best_val_acc\n",
    "            }, checkpoint_path)\n",
    "            if epoch % 5 == 0 or epoch == 1:\n",
    "                print(f'   ✅ Saved - Best {\", \".join(improvement_msg)}')\n",
    "        else:\n",
    "            patience_counter += 1\n",
    "        \n",
    "        # Early stopping\n",
    "        if patience_counter >= patience:\n",
    "            print(f'\\n⏹️ Early stopping at epoch {epoch}')\n",
    "            break\n",
    "    \n",
    "    train_time = time.time() - start_time\n",
    "    \n",
    "    # Load best model\n",
    "    checkpoint = torch.load(MODELS_PATH / f'{model_name}_best.pt', weights_only=False)\n",
    "    model.load_state_dict(checkpoint['model_state_dict'])\n",
    "    \n",
    "    print(f'\\n✅ Training complete in {train_time:.2f}s')\n",
    "    print(f'Best Val F1: {best_val_f1:.4f} | Best Val Acc: {best_val_acc:.4f}')\n",
    "    \n",
    "    return {\n",
    "        'model': model,\n",
    "        'history': history,\n",
    "        'train_time': train_time,\n",
    "        'best_epoch': epoch - patience_counter,\n",
    "        'best_val_f1': best_val_f1,\n",
    "        'best_val_acc': best_val_acc\n",
    "    }\n",
    "\n",
    "print('✅ Complete training function defined')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 9️⃣ Create Transaction Sequences"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 9.1 Create Train/Val/Test Splits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T18:41:57.287350Z",
     "iopub.status.busy": "2025-10-27T18:41:57.286770Z",
     "iopub.status.idle": "2025-10-27T18:42:16.599866Z",
     "shell.execute_reply": "2025-10-27T18:42:16.599213Z",
     "shell.execute_reply.started": "2025-10-27T18:41:57.287327Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "🔍 Mode Detection:\n",
      "   Total users: 319,748\n",
      "   Users with ≥10 transactions: 0\n",
      "   Mean transactions per user: 1.00\n",
      "   Median transactions per user: 1\n",
      "   ✅ Using TEMPORAL mode (insufficient multi-transaction users)\n",
      "\n",
      "📊 Creating sequences in TEMPORAL mode\n",
      "   Sequence length: 10\n",
      "   Stride: 10\n",
      "Engineering sequence features...\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ab56f9ae0fbb47218fd78c80ebf7637e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Creating sequences:   0%|          | 0/31977 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "✅ Created 31,977 sequences\n",
      "   Fraud sequences: 213 (0.67%)\n",
      "\n",
      "📊 Sequence Statistics (BEFORE Balancing):\n",
      "   Total sequences: 31,977\n",
      "   Fraud sequences: 213 (0.67%)\n",
      "   Shape: (31977, 10, 18)\n",
      "✅ Saved sequence generator to: /kaggle/working/sequence_generator.pkl\n"
     ]
    }
   ],
   "source": [
    "# ⭐ FIX #5: Initialize sequence generator with NO OVERLAP (stride = sequence_length)\n",
    "# This reduces data leakage from sliding windows\n",
    "seq_generator = TransactionSequenceGenerator(\n",
    "    sequence_length=10,\n",
    "    stride=10,  # Changed from 5 → 10 (0% overlap instead of 50%)\n",
    "    min_transactions=5,\n",
    "    mode='auto'  # Will auto-detect user-based vs temporal mode\n",
    ")\n",
    "\n",
    "# Create sequences (BEFORE balancing)\n",
    "sequences, labels, metadata = seq_generator.create_sequences_paysim(df)\n",
    "\n",
    "# Convert to numpy arrays first\n",
    "sequences_array = np.array(sequences)\n",
    "labels_array = np.array(labels)\n",
    "\n",
    "print(f'\\n📊 Sequence Statistics (BEFORE Balancing):')\n",
    "print(f'   Total sequences: {len(sequences_array):,}')\n",
    "print(f'   Fraud sequences: {labels_array.sum():,} ({labels_array.mean()*100:.2f}%)')\n",
    "print(f'   Shape: {sequences_array.shape}')\n",
    "\n",
    "# Save sequence generator to writable location\n",
    "if RUNNING_ON_KAGGLE:\n",
    "    generator_path = WORKING_ROOT / 'sequence_generator.pkl'\n",
    "else:\n",
    "    generator_path = PROCESSED_PATH / 'sequence_generator.pkl'\n",
    "\n",
    "seq_generator.save(generator_path)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 8.2 Balance Training Data\n",
    "\n",
    "⭐ **FIX #2:** Address extreme class imbalance (0.64% fraud rate)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T18:42:30.538408Z",
     "iopub.status.busy": "2025-10-27T18:42:30.537791Z",
     "iopub.status.idle": "2025-10-27T18:42:30.919516Z",
     "shell.execute_reply": "2025-10-27T18:42:30.918838Z",
     "shell.execute_reply.started": "2025-10-27T18:42:30.538388Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "⭐ Balancing training sequences...\n",
      "Before balancing: 31764 legit, 213 fraud (ratio: 149.1:1)\n",
      "After balancing: 6390 legit, 639 fraud (ratio: 10.0:1)\n",
      "Fraud rate: 9.09% (vs 0.67% before)\n",
      "\n",
      "Normalizing balanced sequences...\n",
      "Normalizing sequences...\n",
      "\n",
      "✅ Final dataset shape: (7029, 10, 18)\n",
      "   Labels shape: (7029,)\n",
      "   Fraud rate: 9.09%\n"
     ]
    }
   ],
   "source": [
    "# ⭐ FIX #2: Hybrid Data Balancing Strategy\n",
    "# - Oversample minority class (fraud) by 3x\n",
    "# - Undersample majority class (legit) to achieve target ratio\n",
    "# - Target: 10:1 legitimate to fraud ratio (vs current 155:1)\n",
    "\n",
    "def balance_sequences(sequences, labels, strategy='hybrid', target_ratio=10.0, fraud_multiplier=3):\n",
    "    \"\"\"\n",
    "    Balance sequence dataset using hybrid oversampling + undersampling.\n",
    "    \n",
    "    Args:\n",
    "        sequences: np.array of shape (N, seq_len, n_features)\n",
    "        labels: np.array of shape (N,)\n",
    "        strategy: 'hybrid', 'oversample', or 'undersample'\n",
    "        target_ratio: Target ratio of legit:fraud (default 10:1)\n",
    "        fraud_multiplier: How many times to replicate fraud sequences (default 3x)\n",
    "    \n",
    "    Returns:\n",
    "        balanced_sequences, balanced_labels\n",
    "    \"\"\"\n",
    "    fraud_idx = np.where(labels == 1)[0]\n",
    "    legit_idx = np.where(labels == 0)[0]\n",
    "    \n",
    "    n_fraud = len(fraud_idx)\n",
    "    n_legit = len(legit_idx)\n",
    "    \n",
    "    print(f\"Before balancing: {n_legit} legit, {n_fraud} fraud (ratio: {n_legit/n_fraud:.1f}:1)\")\n",
    "    \n",
    "    if strategy == 'hybrid':\n",
    "        # Step 1: Oversample fraud by fraud_multiplier\n",
    "        fraud_oversampled_idx = np.tile(fraud_idx, fraud_multiplier)\n",
    "        n_fraud_after = len(fraud_oversampled_idx)\n",
    "        \n",
    "        # Step 2: Undersample legit to achieve target ratio\n",
    "        n_legit_target = int(n_fraud_after * target_ratio)\n",
    "        n_legit_target = min(n_legit_target, n_legit)  # Don't exceed original count\n",
    "        \n",
    "        legit_undersampled_idx = np.random.choice(legit_idx, size=n_legit_target, replace=False)\n",
    "        \n",
    "        # Combine and shuffle\n",
    "        balanced_idx = np.concatenate([legit_undersampled_idx, fraud_oversampled_idx])\n",
    "        \n",
    "    elif strategy == 'oversample':\n",
    "        # Only oversample fraud to match legit\n",
    "        n_fraud_target = n_legit\n",
    "        fraud_oversampled_idx = np.random.choice(fraud_idx, size=n_fraud_target, replace=True)\n",
    "        balanced_idx = np.concatenate([legit_idx, fraud_oversampled_idx])\n",
    "        \n",
    "    elif strategy == 'undersample':\n",
    "        # Only undersample legit to match fraud\n",
    "        legit_undersampled_idx = np.random.choice(legit_idx, size=n_fraud, replace=False)\n",
    "        balanced_idx = np.concatenate([legit_undersampled_idx, fraud_idx])\n",
    "    \n",
    "    # Shuffle indices\n",
    "    np.random.shuffle(balanced_idx)\n",
    "    \n",
    "    balanced_sequences = sequences[balanced_idx]\n",
    "    balanced_labels = labels[balanced_idx]\n",
    "    \n",
    "    n_fraud_final = np.sum(balanced_labels == 1)\n",
    "    n_legit_final = np.sum(balanced_labels == 0)\n",
    "    fraud_rate_final = n_fraud_final / len(balanced_labels) * 100\n",
    "    \n",
    "    print(f\"After balancing: {n_legit_final} legit, {n_fraud_final} fraud (ratio: {n_legit_final/n_fraud_final:.1f}:1)\")\n",
    "    print(f\"Fraud rate: {fraud_rate_final:.2f}% (vs {n_fraud/len(labels)*100:.2f}% before)\")\n",
    "    \n",
    "    return balanced_sequences, balanced_labels\n",
    "\n",
    "# Apply balancing to training data only (not validation/test)\n",
    "print(\"\\n⭐ Balancing training sequences...\")\n",
    "sequences_balanced, labels_balanced = balance_sequences(\n",
    "    sequences_array, \n",
    "    labels_array, \n",
    "    strategy='hybrid',\n",
    "    target_ratio=10.0,  # 10:1 legit:fraud\n",
    "    fraud_multiplier=3   # Replicate fraud 3x\n",
    ")\n",
    "\n",
    "# Normalize the balanced sequences\n",
    "print(\"\\nNormalizing balanced sequences...\")\n",
    "sequences_normalized = seq_generator.normalize_sequences(sequences_balanced, fit=True)\n",
    "\n",
    "print(f\"\\n✅ Final dataset shape: {sequences_normalized.shape}\")\n",
    "print(f\"   Labels shape: {labels_balanced.shape}\")\n",
    "print(f\"   Fraud rate: {np.mean(labels_balanced)*100:.2f}%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 9.2 Create PyTorch DataLoaders"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T18:42:42.316428Z",
     "iopub.status.busy": "2025-10-27T18:42:42.315948Z",
     "iopub.status.idle": "2025-10-27T18:42:42.351718Z",
     "shell.execute_reply": "2025-10-27T18:42:42.351125Z",
     "shell.execute_reply.started": "2025-10-27T18:42:42.316407Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Stratified split (ensures consistent fraud rates):\n",
      "   Train: 4,498 (fraud: 409, 9.09%)\n",
      "   Val:   1,125 (fraud: 102, 9.07%)\n",
      "   Test:  1,406 (fraud: 128, 9.10%)\n",
      "\n",
      "   All splits should have similar fraud rates (~9.09%)\n"
     ]
    }
   ],
   "source": [
    "# ⭐ FIX #3: Stratified Split (instead of temporal split)\n",
    "# This ensures fraud rate is consistent across train/val/test splits\n",
    "# Prevents the 10x distribution mismatch (0.64% train vs 4.75% test)\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Convert to numpy arrays (use balanced data)\n",
    "sequences_np = np.array(sequences_normalized)\n",
    "labels_np = np.array(labels_balanced)\n",
    "\n",
    "# First split: 80% train+val, 20% test (stratified)\n",
    "train_val_sequences, test_sequences, train_val_labels, test_labels = train_test_split(\n",
    "    sequences_np, labels_np, \n",
    "    test_size=0.2, \n",
    "    stratify=labels_np,\n",
    "    random_state=42\n",
    ")\n",
    "\n",
    "# Second split: 80% train, 20% val from train+val (stratified)\n",
    "train_sequences, val_sequences, train_labels, val_labels = train_test_split(\n",
    "    train_val_sequences, train_val_labels,\n",
    "    test_size=0.2,  # 20% of 80% = 16% of total\n",
    "    stratify=train_val_labels,\n",
    "    random_state=42\n",
    ")\n",
    "\n",
    "print(f'✅ Stratified split (ensures consistent fraud rates):')\n",
    "print(f'   Train: {len(train_sequences):,} (fraud: {train_labels.sum():,}, {train_labels.mean()*100:.2f}%)')\n",
    "print(f'   Val:   {len(val_sequences):,} (fraud: {val_labels.sum():,}, {val_labels.mean()*100:.2f}%)')\n",
    "print(f'   Test:  {len(test_sequences):,} (fraud: {test_labels.sum():,}, {test_labels.mean()*100:.2f}%)')\n",
    "print(f'\\n   All splits should have similar fraud rates (~{labels_np.mean()*100:.2f}%)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1️⃣0️⃣ Train All Models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T18:42:46.963338Z",
     "iopub.status.busy": "2025-10-27T18:42:46.962681Z",
     "iopub.status.idle": "2025-10-27T18:42:47.002064Z",
     "shell.execute_reply": "2025-10-27T18:42:47.001249Z",
     "shell.execute_reply.started": "2025-10-27T18:42:46.963316Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Data loaders created (batch_size=256)\n",
      "   Train batches: 18\n",
      "   Val batches: 5\n",
      "   Test batches: 6\n"
     ]
    }
   ],
   "source": [
    "# Create PyTorch datasets\n",
    "train_dataset = SequenceDataset(train_sequences, train_labels)\n",
    "val_dataset = SequenceDataset(val_sequences, val_labels)\n",
    "test_dataset = SequenceDataset(test_sequences, test_labels)\n",
    "\n",
    "# Create data loaders\n",
    "BATCH_SIZE = 256\n",
    "\n",
    "train_loader = DataLoader(\n",
    "    train_dataset,\n",
    "    batch_size=BATCH_SIZE,\n",
    "    shuffle=True,\n",
    "    num_workers=0,\n",
    "    pin_memory=True if torch.cuda.is_available() else False\n",
    ")\n",
    "\n",
    "val_loader = DataLoader(\n",
    "    val_dataset,\n",
    "    batch_size=BATCH_SIZE,\n",
    "    shuffle=False,\n",
    "    num_workers=0,\n",
    "    pin_memory=True if torch.cuda.is_available() else False\n",
    ")\n",
    "\n",
    "test_loader = DataLoader(\n",
    "    test_dataset,\n",
    "    batch_size=BATCH_SIZE,\n",
    "    shuffle=False,\n",
    "    num_workers=0,\n",
    "    pin_memory=True if torch.cuda.is_available() else False\n",
    ")\n",
    "\n",
    "print(f'✅ Data loaders created (batch_size={BATCH_SIZE})')\n",
    "print(f'   Train batches: {len(train_loader)}')\n",
    "print(f'   Val batches: {len(val_loader)}')\n",
    "print(f'   Test batches: {len(test_loader)}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 9️⃣ Train All Models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T18:42:50.813846Z",
     "iopub.status.busy": "2025-10-27T18:42:50.813547Z",
     "iopub.status.idle": "2025-10-27T18:43:45.863835Z",
     "shell.execute_reply": "2025-10-27T18:43:45.862983Z",
     "shell.execute_reply.started": "2025-10-27T18:42:50.813799Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Input size (features per time step): 18\n",
      "\n",
      "BiLSTM_Attention: 1,165,123 parameters\n",
      "\n",
      "======================================================================\n",
      "Training BiLSTM_Attention\n",
      "======================================================================\n",
      "   Class weights: Legit=0.1819, Fraud=18.1814\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 001/100 | Loss: 0.4810 | Val Acc: 0.0907 | Val F1: 0.1663 | Val AUC: 0.9142\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 005/100 | Loss: 0.0385 | Val Acc: 0.2107 | Val F1: 0.1868 | Val AUC: 0.9444\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 010/100 | Loss: 0.0206 | Val Acc: 0.2498 | Val F1: 0.1947 | Val AUC: 0.9646\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 015/100 | Loss: 0.0158 | Val Acc: 0.3698 | Val F1: 0.2200 | Val AUC: 0.9712\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 020/100 | Loss: 0.0154 | Val Acc: 0.3742 | Val F1: 0.2212 | Val AUC: 0.9742\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3836106b1a9644f0af496bba2eb28ca3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e1bed0c627684c23ad9f75ab2d017a95",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c340a57b45b24f098fc87bc07d260481",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d07c1bb506b442989338cf6beb0abdfa",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a36b930e27554532bb81b221864e5fc7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2867f4411b4b40818dff9d58949bab8e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 025/100 | Loss: 0.0169 | Val Acc: 0.4996 | Val F1: 0.2621 | Val AUC: 0.9757\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3c893f9cc83b432991adc7275bcc7f22",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "255350922dd54470b4f38d4ef8b26d7f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 030/100 | Loss: 0.0109 | Val Acc: 0.4676 | Val F1: 0.2540 | Val AUC: 0.9868\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 035/100 | Loss: 0.0082 | Val Acc: 0.5591 | Val F1: 0.2914 | Val AUC: 0.9893\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 040/100 | Loss: 0.0066 | Val Acc: 0.6418 | Val F1: 0.3339 | Val AUC: 0.9885\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 045/100 | Loss: 0.0053 | Val Acc: 0.6880 | Val F1: 0.3653 | Val AUC: 0.9938\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 050/100 | Loss: 0.0058 | Val Acc: 0.7182 | Val F1: 0.3892 | Val AUC: 0.9912\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 055/100 | Loss: 0.0042 | Val Acc: 0.6978 | Val F1: 0.3727 | Val AUC: 0.9917\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 060/100 | Loss: 0.0045 | Val Acc: 0.7209 | Val F1: 0.3915 | Val AUC: 0.9914\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 065/100 | Loss: 0.0081 | Val Acc: 0.5289 | Val F1: 0.2779 | Val AUC: 0.9918\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 070/100 | Loss: 0.0067 | Val Acc: 0.6844 | Val F1: 0.3580 | Val AUC: 0.9862\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 075/100 | Loss: 0.0067 | Val Acc: 0.6302 | Val F1: 0.3269 | Val AUC: 0.9887\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 080/100 | Loss: 0.0042 | Val Acc: 0.8729 | Val F1: 0.5855 | Val AUC: 0.9932\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 085/100 | Loss: 0.0044 | Val Acc: 0.8044 | Val F1: 0.4787 | Val AUC: 0.9937\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 090/100 | Loss: 0.0035 | Val Acc: 0.8124 | Val F1: 0.4891 | Val AUC: 0.9900\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 095/100 | Loss: 0.0028 | Val Acc: 0.8871 | Val F1: 0.6092 | Val AUC: 0.9924\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 100/100 | Loss: 0.0038 | Val Acc: 0.8133 | Val F1: 0.4903 | Val AUC: 0.9943\n",
      "\n",
      "✅ Training complete in 40.47s\n",
      "Best Val F1: 0.6966\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/6 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "📊 BiLSTM_Attention Test Results:\n",
      "   Accuracy:  0.9132\n",
      "   Precision: 0.5122\n",
      "   Recall:    0.9844\n",
      "   F1 Score:  0.6738\n",
      "   AUC:       0.9938\n",
      "   AP:        0.9811\n",
      "\n",
      "ResidualGRU: 433,410 parameters\n",
      "\n",
      "======================================================================\n",
      "Training ResidualGRU\n",
      "======================================================================\n",
      "   Class weights: Legit=0.1819, Fraud=18.1814\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 001/100 | Loss: 0.8171 | Val Acc: 0.2578 | Val F1: 0.1854 | Val AUC: 0.7769\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 005/100 | Loss: 0.0750 | Val Acc: 0.1484 | Val F1: 0.1756 | Val AUC: 0.8652\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 010/100 | Loss: 0.0566 | Val Acc: 0.1689 | Val F1: 0.1791 | Val AUC: 0.9071\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 015/100 | Loss: 0.0486 | Val Acc: 0.1938 | Val F1: 0.1836 | Val AUC: 0.9058\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "⏹️ Early stopping at epoch 16\n",
      "\n",
      "✅ Training complete in 4.66s\n",
      "Best Val F1: 0.1854\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/6 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "📊 ResidualGRU Test Results:\n",
      "   Accuracy:  0.2639\n",
      "   Precision: 0.1074\n",
      "   Recall:    0.9688\n",
      "   F1 Score:  0.1933\n",
      "   AUC:       0.8029\n",
      "   AP:        0.4711\n",
      "\n",
      "LSTM_CNN_Hybrid: 780,546 parameters\n",
      "\n",
      "======================================================================\n",
      "Training LSTM_CNN_Hybrid\n",
      "======================================================================\n",
      "   Class weights: Legit=0.1819, Fraud=18.1814\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 001/100 | Loss: 0.4317 | Val Acc: 0.4302 | Val F1: 0.2305 | Val AUC: 0.8688\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 005/100 | Loss: 0.0294 | Val Acc: 0.2089 | Val F1: 0.1865 | Val AUC: 0.9538\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 010/100 | Loss: 0.0166 | Val Acc: 0.3129 | Val F1: 0.2088 | Val AUC: 0.9804\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 015/100 | Loss: 0.0099 | Val Acc: 0.3556 | Val F1: 0.2196 | Val AUC: 0.9827\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Training:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "⏹️ Early stopping at epoch 16\n",
      "\n",
      "✅ Training complete in 5.69s\n",
      "Best Val F1: 0.2305\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating:   0%|          | 0/6 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "📊 LSTM_CNN_Hybrid Test Results:\n",
      "   Accuracy:  0.4410\n",
      "   Precision: 0.1336\n",
      "   Recall:    0.9375\n",
      "   F1 Score:  0.2339\n",
      "   AUC:       0.8627\n",
      "   AP:        0.6416\n",
      "\n",
      "======================================================================\n",
      "✅ ALL MODELS TRAINED\n",
      "======================================================================\n"
     ]
    }
   ],
   "source": [
    "input_size = train_sequences.shape[2]  # Number of features\n",
    "print(f'Input size (features per time step): {input_size}')\n",
    "\n",
    "# Model configurations\n",
    "models_config = [\n",
    "    {\n",
    "        'name': 'BiLSTM_Attention',\n",
    "        'model': BiLSTMWithAttention(input_size, hidden_size=128, num_layers=3, dropout=0.3),\n",
    "        'lr': 0.001,\n",
    "        'epochs': 100\n",
    "    },\n",
    "    {\n",
    "        'name': 'ResidualGRU',\n",
    "        'model': ResidualGRU(input_size, hidden_size=128, num_layers=4, dropout=0.3),\n",
    "        'lr': 0.001,\n",
    "        'epochs': 100\n",
    "    },\n",
    "    {\n",
    "        'name': 'LSTM_CNN_Hybrid',\n",
    "        'model': LSTMCNN(input_size, hidden_size=128, num_layers=2, dropout=0.3),\n",
    "        'lr': 0.001,\n",
    "        'epochs': 100\n",
    "    }\n",
    "]\n",
    "\n",
    "results = {}\n",
    "\n",
    "for config in models_config:\n",
    "    model_name = config['name']\n",
    "    model = config['model'].to(device)\n",
    "    \n",
    "    # Count parameters\n",
    "    num_params = sum(p.numel() for p in model.parameters())\n",
    "    print(f'\\n{model_name}: {num_params:,} parameters')\n",
    "    \n",
    "    # Train model\n",
    "    result = train_model(\n",
    "        model=model,\n",
    "        train_loader=train_loader,\n",
    "        val_loader=val_loader,\n",
    "        model_name=model_name,\n",
    "        epochs=config['epochs'],\n",
    "        lr=config['lr'],\n",
    "        patience=15,\n",
    "        device=device\n",
    "    )\n",
    "    \n",
    "    # Evaluate on test set\n",
    "    checkpoint = torch.load(MODELS_PATH / f'{model_name}_best.pt', weights_only=False)\n",
    "    model.load_state_dict(checkpoint['model_state_dict'])\n",
    "    \n",
    "    test_metrics, test_preds, test_probs = evaluate(\n",
    "        model, test_loader, \n",
    "        FocalLoss(alpha=train_dataset.get_class_weights().to(device), gamma=2.5),\n",
    "        device\n",
    "    )\n",
    "    \n",
    "    print(f'\\n📊 {model_name} Test Results:')\n",
    "    print(f'   Accuracy:  {test_metrics[\"accuracy\"]:.4f}')\n",
    "    print(f'   Precision: {test_metrics[\"precision\"]:.4f}')\n",
    "    print(f'   Recall:    {test_metrics[\"recall\"]:.4f}')\n",
    "    print(f'   F1 Score:  {test_metrics[\"f1\"]:.4f}')\n",
    "    print(f'   AUC:       {test_metrics[\"auc\"]:.4f}')\n",
    "    print(f'   AP:        {test_metrics[\"ap\"]:.4f}')\n",
    "    \n",
    "    results[model_name] = {\n",
    "        'test_metrics': test_metrics,\n",
    "        'history': result['history'],\n",
    "        'train_time': result['train_time'],\n",
    "        'best_epoch': result['best_epoch'],\n",
    "        'num_parameters': num_params,\n",
    "        'predictions': {\n",
    "            'preds': test_preds,\n",
    "            'probs': test_probs\n",
    "        }\n",
    "    }\n",
    "    \n",
    "    # Clear memory\n",
    "    if torch.cuda.is_available():\n",
    "        torch.cuda.empty_cache()\n",
    "    gc.collect()\n",
    "\n",
    "print('\\n' + '='*70)\n",
    "print('✅ ALL MODELS TRAINED')\n",
    "print('='*70)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 🔟 Results Analysis and Visualization\n",
    "\n",
    "### 10.1 Model Comparison Table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T18:43:55.347293Z",
     "iopub.status.busy": "2025-10-27T18:43:55.346891Z",
     "iopub.status.idle": "2025-10-27T18:43:55.362705Z",
     "shell.execute_reply": "2025-10-27T18:43:55.361992Z",
     "shell.execute_reply.started": "2025-10-27T18:43:55.347275Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "📊 Model Comparison:\n",
      "           Model  Accuracy  Precision   Recall       F1      AUC       AP  Train Time (s)  Epochs  Parameters\n",
      "BiLSTM_Attention  0.913229   0.512195 0.984375 0.673797 0.993783 0.981074       40.470285      98     1165123\n",
      " LSTM_CNN_Hybrid  0.440967   0.133630 0.937500 0.233918 0.862688 0.641621        5.690813       1      780546\n",
      "     ResidualGRU  0.263869   0.107359 0.968750 0.193297 0.802909 0.471067        4.656174       1      433410\n",
      "\n",
      "🏆 Best Model: BiLSTM_Attention (F1 = 0.6738)\n"
     ]
    }
   ],
   "source": [
    "# Create results dataframe\n",
    "results_data = []\n",
    "for model_name, model_results in results.items():\n",
    "    metrics = model_results['test_metrics']\n",
    "    results_data.append({\n",
    "        'Model': model_name,\n",
    "        'Accuracy': metrics['accuracy'],\n",
    "        'Precision': metrics['precision'],\n",
    "        'Recall': metrics['recall'],\n",
    "        'F1': metrics['f1'],\n",
    "        'AUC': metrics['auc'],\n",
    "        'AP': metrics['ap'],\n",
    "        'Train Time (s)': model_results['train_time'],\n",
    "        'Epochs': model_results['best_epoch'],\n",
    "        'Parameters': model_results['num_parameters']\n",
    "    })\n",
    "\n",
    "results_df = pd.DataFrame(results_data)\n",
    "results_df = results_df.sort_values('F1', ascending=False)\n",
    "\n",
    "print('📊 Model Comparison:')\n",
    "print(results_df.to_string(index=False))\n",
    "\n",
    "# Best model\n",
    "best_model = results_df.iloc[0]['Model']\n",
    "best_f1 = results_df.iloc[0]['F1']\n",
    "print(f'\\n🏆 Best Model: {best_model} (F1 = {best_f1:.4f})')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 10.2 Training Curves"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T18:44:09.734075Z",
     "iopub.status.busy": "2025-10-27T18:44:09.733720Z",
     "iopub.status.idle": "2025-10-27T18:44:11.966553Z",
     "shell.execute_reply": "2025-10-27T18:44:11.965686Z",
     "shell.execute_reply.started": "2025-10-27T18:44:09.734053Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x1000 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Training curves saved to: /kaggle/working/results/lstm_training_curves.png\n"
     ]
    }
   ],
   "source": [
    "fig, axes = plt.subplots(2, 2, figsize=(15, 10))\n",
    "\n",
    "# Training Loss\n",
    "for model_name in results.keys():\n",
    "    axes[0, 0].plot(results[model_name]['history']['train_loss'], \n",
    "                   label=model_name, linewidth=2)\n",
    "axes[0, 0].set_title('Training Loss', fontsize=14, fontweight='bold')\n",
    "axes[0, 0].set_xlabel('Epoch')\n",
    "axes[0, 0].set_ylabel('Loss')\n",
    "axes[0, 0].legend()\n",
    "axes[0, 0].grid(True, alpha=0.3)\n",
    "\n",
    "# Validation Accuracy\n",
    "for model_name in results.keys():\n",
    "    axes[0, 1].plot(results[model_name]['history']['val_acc'], \n",
    "                   label=model_name, linewidth=2)\n",
    "axes[0, 1].set_title('Validation Accuracy', fontsize=14, fontweight='bold')\n",
    "axes[0, 1].set_xlabel('Epoch')\n",
    "axes[0, 1].set_ylabel('Accuracy')\n",
    "axes[0, 1].legend()\n",
    "axes[0, 1].grid(True, alpha=0.3)\n",
    "\n",
    "# Validation F1\n",
    "for model_name in results.keys():\n",
    "    axes[1, 0].plot(results[model_name]['history']['val_f1'], \n",
    "                   label=model_name, linewidth=2)\n",
    "axes[1, 0].set_title('Validation F1 Score', fontsize=14, fontweight='bold')\n",
    "axes[1, 0].set_xlabel('Epoch')\n",
    "axes[1, 0].set_ylabel('F1 Score')\n",
    "axes[1, 0].legend()\n",
    "axes[1, 0].grid(True, alpha=0.3)\n",
    "\n",
    "# Validation AUC\n",
    "for model_name in results.keys():\n",
    "    axes[1, 1].plot(results[model_name]['history']['val_auc'], \n",
    "                   label=model_name, linewidth=2)\n",
    "axes[1, 1].set_title('Validation AUC', fontsize=14, fontweight='bold')\n",
    "axes[1, 1].set_xlabel('Epoch')\n",
    "axes[1, 1].set_ylabel('AUC')\n",
    "axes[1, 1].legend()\n",
    "axes[1, 1].grid(True, alpha=0.3)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig(RESULTS_PATH / 'lstm_training_curves.png', dpi=150, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "print(f'✅ Training curves saved to: {RESULTS_PATH / \"lstm_training_curves.png\"}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 10.3 Performance Comparison Charts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T18:44:11.968154Z",
     "iopub.status.busy": "2025-10-27T18:44:11.967831Z",
     "iopub.status.idle": "2025-10-27T18:44:12.873233Z",
     "shell.execute_reply": "2025-10-27T18:44:12.872508Z",
     "shell.execute_reply.started": "2025-10-27T18:44:11.968131Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Performance comparison saved to: /kaggle/working/results/lstm_performance_comparison.png\n"
     ]
    }
   ],
   "source": [
    "fig, axes = plt.subplots(1, 2, figsize=(15, 5))\n",
    "\n",
    "# Metrics comparison\n",
    "metrics_to_plot = ['Accuracy', 'Precision', 'Recall', 'F1', 'AUC']\n",
    "x = np.arange(len(results_df))\n",
    "width = 0.15\n",
    "\n",
    "for i, metric in enumerate(metrics_to_plot):\n",
    "    axes[0].bar(x + i*width, results_df[metric], width, \n",
    "               label=metric, alpha=0.8)\n",
    "\n",
    "axes[0].set_xlabel('Model', fontsize=12)\n",
    "axes[0].set_ylabel('Score', fontsize=12)\n",
    "axes[0].set_title('Test Set Performance Comparison', fontsize=14, fontweight='bold')\n",
    "axes[0].set_xticks(x + width * 2)\n",
    "axes[0].set_xticklabels(results_df['Model'], rotation=45, ha='right')\n",
    "axes[0].legend()\n",
    "axes[0].grid(True, alpha=0.3, axis='y')\n",
    "axes[0].set_ylim([0, 1])\n",
    "\n",
    "# Training time\n",
    "axes[1].bar(results_df['Model'], results_df['Train Time (s)'], \n",
    "           color='steelblue', alpha=0.8)\n",
    "axes[1].set_xlabel('Model', fontsize=12)\n",
    "axes[1].set_ylabel('Time (seconds)', fontsize=12)\n",
    "axes[1].set_title('Training Time Comparison', fontsize=14, fontweight='bold')\n",
    "axes[1].set_xticklabels(results_df['Model'], rotation=45, ha='right')\n",
    "axes[1].grid(True, alpha=0.3, axis='y')\n",
    "\n",
    "for i, v in enumerate(results_df['Train Time (s)']):\n",
    "    axes[1].text(i, v + 0.5, f'{v:.1f}s', ha='center', va='bottom')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig(RESULTS_PATH / 'lstm_performance_comparison.png', dpi=150, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "print(f'✅ Performance comparison saved to: {RESULTS_PATH / \"lstm_performance_comparison.png\"}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 10.4 Confusion Matrices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T18:44:39.645861Z",
     "iopub.status.busy": "2025-10-27T18:44:39.645571Z",
     "iopub.status.idle": "2025-10-27T18:44:40.900318Z",
     "shell.execute_reply": "2025-10-27T18:44:40.899496Z",
     "shell.execute_reply.started": "2025-10-27T18:44:39.645837Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x400 with 6 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Confusion matrices saved to: /kaggle/working/results/lstm_confusion_matrices.png\n"
     ]
    }
   ],
   "source": [
    "fig, axes = plt.subplots(1, 3, figsize=(15, 4))\n",
    "\n",
    "for idx, model_name in enumerate(results.keys()):\n",
    "    preds = results[model_name]['predictions']['preds']\n",
    "    cm = confusion_matrix(test_labels, preds)\n",
    "    \n",
    "    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', \n",
    "               xticklabels=['Legit', 'Fraud'],\n",
    "               yticklabels=['Legit', 'Fraud'],\n",
    "               ax=axes[idx])\n",
    "    axes[idx].set_title(f'{model_name}\\nConfusion Matrix', fontweight='bold')\n",
    "    axes[idx].set_ylabel('True Label')\n",
    "    axes[idx].set_xlabel('Predicted Label')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig(RESULTS_PATH / 'lstm_confusion_matrices.png', dpi=150, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "print(f'✅ Confusion matrices saved to: {RESULTS_PATH / \"lstm_confusion_matrices.png\"}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1️⃣1️⃣ Extract Embeddings for Fusion Model\n",
    "\n",
    "This is a **critical step** for Notebook 05 where we'll combine GNN and LSTM embeddings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T18:45:20.302052Z",
     "iopub.status.busy": "2025-10-27T18:45:20.301391Z",
     "iopub.status.idle": "2025-10-27T18:45:21.136249Z",
     "shell.execute_reply": "2025-10-27T18:45:21.135480Z",
     "shell.execute_reply.started": "2025-10-27T18:45:20.302026Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Extracting embeddings from BiLSTM_Attention...\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Extracting train:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   train: (4498, 256)\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Extracting val:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   val: (1125, 256)\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Extracting test:   0%|          | 0/6 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   test: (1406, 256)\n",
      "\n",
      "Extracting embeddings from ResidualGRU...\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Extracting train:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   train: (4498, 256)\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Extracting val:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   val: (1125, 256)\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Extracting test:   0%|          | 0/6 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   test: (1406, 256)\n",
      "\n",
      "Extracting embeddings from LSTM_CNN_Hybrid...\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Extracting train:   0%|          | 0/18 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   train: (4498, 256)\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Extracting val:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   val: (1125, 256)\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Extracting test:   0%|          | 0/6 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   test: (1406, 256)\n",
      "\n",
      "✅ Embeddings saved to: /kaggle/working/lstm_embeddings.pkl\n",
      "   These embeddings will be used in Notebook 05 for fusion with GNN embeddings\n"
     ]
    }
   ],
   "source": [
    "embeddings_dict = {}\n",
    "\n",
    "for model_name in results.keys():\n",
    "    print(f'\\nExtracting embeddings from {model_name}...')\n",
    "    \n",
    "    # Load best model\n",
    "    if model_name == 'BiLSTM_Attention':\n",
    "        model = BiLSTMWithAttention(input_size, hidden_size=128, num_layers=3).to(device)\n",
    "    elif model_name == 'ResidualGRU':\n",
    "        model = ResidualGRU(input_size, hidden_size=128, num_layers=4).to(device)\n",
    "    else:  # LSTM_CNN_Hybrid\n",
    "        model = LSTMCNN(input_size, hidden_size=128, num_layers=2).to(device)\n",
    "    \n",
    "    checkpoint = torch.load(MODELS_PATH / f'{model_name}_best.pt', weights_only=False)\n",
    "    model.load_state_dict(checkpoint['model_state_dict'])\n",
    "    model.eval()\n",
    "    \n",
    "    # Extract embeddings for all splits\n",
    "    for split_name, loader in [('train', train_loader), \n",
    "                               ('val', val_loader), \n",
    "                               ('test', test_loader)]:\n",
    "        embeddings_list = []\n",
    "        labels_list = []\n",
    "        \n",
    "        with torch.no_grad():\n",
    "            for sequences, labels in tqdm(loader, desc=f'Extracting {split_name}', leave=False):\n",
    "                sequences = sequences.to(device)\n",
    "                embeddings = model.extract_embeddings(sequences)\n",
    "                embeddings_list.append(embeddings.cpu())\n",
    "                labels_list.append(labels)\n",
    "        \n",
    "        embeddings_all = torch.cat(embeddings_list).numpy()\n",
    "        labels_all = torch.cat(labels_list).numpy()\n",
    "        \n",
    "        if model_name not in embeddings_dict:\n",
    "            embeddings_dict[model_name] = {}\n",
    "        \n",
    "        embeddings_dict[model_name][split_name] = {\n",
    "            'embeddings': embeddings_all,\n",
    "            'labels': labels_all\n",
    "        }\n",
    "        \n",
    "        print(f'   {split_name}: {embeddings_all.shape}')\n",
    "\n",
    "# Save embeddings\n",
    "if RUNNING_ON_KAGGLE:\n",
    "    embeddings_path = WORKING_ROOT / 'lstm_embeddings.pkl'\n",
    "else:\n",
    "    embeddings_path = PROCESSED_PATH / 'lstm_embeddings.pkl'\n",
    "\n",
    "with open(embeddings_path, 'wb') as f:\n",
    "    pickle.dump(embeddings_dict, f)\n",
    "\n",
    "print(f'\\n✅ Embeddings saved to: {embeddings_path}')\n",
    "print(f'   These embeddings will be used in Notebook 05 for fusion with GNN embeddings')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1️⃣2️⃣ Save Results and Metadata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T18:44:14.912153Z",
     "iopub.status.busy": "2025-10-27T18:44:14.911802Z",
     "iopub.status.idle": "2025-10-27T18:44:14.927610Z",
     "shell.execute_reply": "2025-10-27T18:44:14.926793Z",
     "shell.execute_reply.started": "2025-10-27T18:44:14.912133Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Results saved to: /kaggle/working/results/lstm_results.json\n",
      "✅ Training histories saved to: /kaggle/working/results/lstm_training_histories.json\n"
     ]
    }
   ],
   "source": [
    "# Save results summary\n",
    "results_summary = {\n",
    "    'models': results_df.to_dict('records'),\n",
    "    'best_model': {\n",
    "        'name': best_model,\n",
    "        'f1_score': float(best_f1),\n",
    "        'metrics': {k: float(v) for k, v in results[best_model]['test_metrics'].items()}\n",
    "    },\n",
    "    'sequence_config': {\n",
    "        'sequence_length': seq_generator.sequence_length,\n",
    "        'stride': seq_generator.stride,\n",
    "        'input_size': input_size\n",
    "    },\n",
    "    'dataset_info': {\n",
    "        'train_size': len(train_sequences),\n",
    "        'val_size': len(val_sequences),\n",
    "        'test_size': len(test_sequences),\n",
    "        'fraud_rate_train': float(train_labels.mean()),\n",
    "        'fraud_rate_val': float(val_labels.mean()),\n",
    "        'fraud_rate_test': float(test_labels.mean())\n",
    "    }\n",
    "}\n",
    "\n",
    "results_file = RESULTS_PATH / 'lstm_results.json'\n",
    "with open(results_file, 'w') as f:\n",
    "    json.dump(results_summary, f, indent=2)\n",
    "\n",
    "print(f'✅ Results saved to: {results_file}')\n",
    "\n",
    "# Save training histories\n",
    "histories = {\n",
    "    model_name: {\n",
    "        k: [float(x) for x in v] \n",
    "        for k, v in result['history'].items()\n",
    "    }\n",
    "    for model_name, result in results.items()\n",
    "}\n",
    "\n",
    "history_file = RESULTS_PATH / 'lstm_training_histories.json'\n",
    "with open(history_file, 'w') as f:\n",
    "    json.dump(histories, f, indent=2)\n",
    "\n",
    "print(f'✅ Training histories saved to: {history_file}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1️⃣3️⃣ Final Summary and Next Steps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T18:44:14.928972Z",
     "iopub.status.busy": "2025-10-27T18:44:14.928565Z",
     "iopub.status.idle": "2025-10-27T18:44:14.940849Z",
     "shell.execute_reply": "2025-10-27T18:44:14.940067Z",
     "shell.execute_reply.started": "2025-10-27T18:44:14.928947Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "======================================================================\n",
      "🎉 LSTM SEQUENCE MODELS - COMPLETE SUMMARY\n",
      "======================================================================\n",
      "\n",
      "📊 Trained Models: 3\n",
      "\n",
      "   BiLSTM_Attention:\n",
      "      Accuracy:  0.9132\n",
      "      Precision: 0.5122\n",
      "      Recall:    0.9844\n",
      "      F1 Score:  0.6738\n",
      "      AUC:       0.9938\n",
      "      AP:        0.9811\n",
      "\n",
      "   ResidualGRU:\n",
      "      Accuracy:  0.2639\n",
      "      Precision: 0.1074\n",
      "      Recall:    0.9688\n",
      "      F1 Score:  0.1933\n",
      "      AUC:       0.8029\n",
      "      AP:        0.4711\n",
      "\n",
      "   LSTM_CNN_Hybrid:\n",
      "      Accuracy:  0.4410\n",
      "      Precision: 0.1336\n",
      "      Recall:    0.9375\n",
      "      F1 Score:  0.2339\n",
      "      AUC:       0.8627\n",
      "      AP:        0.6416\n",
      "\n",
      "🏆 Best Model: BiLSTM_Attention\n",
      "   F1 Score: 0.6738\n",
      "\n",
      "📁 Generated Outputs:\n",
      "   ✅ Trained models: /kaggle/working/models\n",
      "   ✅ Training results: /kaggle/working/results\n",
      "   ✅ Embeddings for fusion: /kaggle/working/lstm_embeddings.pkl\n",
      "   ✅ Visualizations: /kaggle/working/results\n",
      "\n",
      "📝 Next Steps:\n",
      "   1️⃣ Run Notebook 05: Hybrid Fusion Model\n",
      "   2️⃣ Combine GNN embeddings (from Notebook 03) + LSTM embeddings\n",
      "   3️⃣ Train multi-modal fusion classifier\n",
      "   4️⃣ Compare fusion model with individual models\n",
      "   5️⃣ Achieve state-of-the-art fraud detection performance\n",
      "\n",
      "💾 Kaggle Users:\n",
      "   - All outputs are saved to /kaggle/working/\n",
      "   - Download generated files before the session ends\n",
      "   - Models, embeddings, and results are ready for use in Notebook 05\n",
      "\n",
      "======================================================================\n",
      "✅ NOTEBOOK 04 COMPLETE - READY FOR FUSION!\n",
      "======================================================================\n"
     ]
    }
   ],
   "source": [
    "print('='*70)\n",
    "print('🎉 LSTM SEQUENCE MODELS - COMPLETE SUMMARY')\n",
    "print('='*70)\n",
    "\n",
    "print(f'\\n📊 Trained Models: {len(results)}')\n",
    "for model_name in results.keys():\n",
    "    metrics = results[model_name]['test_metrics']\n",
    "    print(f'\\n   {model_name}:')\n",
    "    print(f'      Accuracy:  {metrics[\"accuracy\"]:.4f}')\n",
    "    print(f'      Precision: {metrics[\"precision\"]:.4f}')\n",
    "    print(f'      Recall:    {metrics[\"recall\"]:.4f}')\n",
    "    print(f'      F1 Score:  {metrics[\"f1\"]:.4f}')\n",
    "    print(f'      AUC:       {metrics[\"auc\"]:.4f}')\n",
    "    print(f'      AP:        {metrics[\"ap\"]:.4f}')\n",
    "\n",
    "print(f'\\n🏆 Best Model: {best_model}')\n",
    "print(f'   F1 Score: {best_f1:.4f}')\n",
    "\n",
    "print(f'\\n📁 Generated Outputs:')\n",
    "print(f'   ✅ Trained models: {MODELS_PATH}')\n",
    "print(f'   ✅ Training results: {RESULTS_PATH}')\n",
    "print(f'   ✅ Embeddings for fusion: {embeddings_path}')\n",
    "print(f'   ✅ Visualizations: {RESULTS_PATH}')\n",
    "\n",
    "print('\\n📝 Next Steps:')\n",
    "print('   1️⃣ Run Notebook 05: Hybrid Fusion Model')\n",
    "print('   2️⃣ Combine GNN embeddings (from Notebook 03) + LSTM embeddings')\n",
    "print('   3️⃣ Train multi-modal fusion classifier')\n",
    "print('   4️⃣ Compare fusion model with individual models')\n",
    "print('   5️⃣ Achieve state-of-the-art fraud detection performance')\n",
    "\n",
    "if RUNNING_ON_KAGGLE:\n",
    "    print('\\n💾 Kaggle Users:')\n",
    "    print('   - All outputs are saved to /kaggle/working/')\n",
    "    print('   - Download generated files before the session ends')\n",
    "    print('   - Models, embeddings, and results are ready for use in Notebook 05')\n",
    "\n",
    "print('\\n' + '='*70)\n",
    "print('✅ NOTEBOOK 04 COMPLETE - READY FOR FUSION!')\n",
    "print('='*70)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 8460364,
     "sourceId": 13520278,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31154,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
